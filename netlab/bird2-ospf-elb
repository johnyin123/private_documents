#[name]="type" type:R/S/N (router,switch,node)
declare -A MAP_NODES=(
    [R]=R
    [SW]=S
    [lvs1]=N
    [lvs2]=N
    [srv1]=N
    [srv2]=N
    [cli1]=N
    [cli2]=N
    )
#[node:ip/prefix]=node:ip/prefix
declare -A MAP_LINES=(
    [R:10.0.1.1/24]=SW:
    [lvs1:10.0.1.10/24]=SW:
    [lvs2:10.0.1.11/24]=SW:
    [srv1:10.0.1.100/24]=SW:
    [srv2:10.0.1.101/24]=SW:
    [cli1:10.0.1.200/24]=SW:
    [cli2:10.0.1.201/24]=SW:
    )
#routes delm ,
declare -A NODES_ROUTES=(
    [lvs1]="default via 10.0.1.1"
    [lvs2]="default via 10.0.1.1"
    [srv1]="default via 10.0.1.1"
    [srv2]="default via 10.0.1.1"
    [cli1]="default via 10.0.1.1"
    [cli2]="default via 10.0.1.1"
    )

SESS=ospfelb
LAB_DIR=/tmp
VIP=10.0.2.100/32


setup_lvs() {
    local ns_name="${1}"
    local vip="${2}"
    local rip_lst="${3}"
    mkdir -p /etc/netns${ns_name}/etc/modprobe.d/
    cat <<EO_CFG >/etc/netns${ns_name}/etc/modprobe.d/ipvs.conf
options ip_vs conn_tab_bits=15
EO_CFG
    IFS='/' read -r tip tmask <<< "${vip}"
    maybe_netns_run "bash -s" "${ns_name}" <<EOF
        ip link add name lbdev0 type dummy
        ip a a ${vip} dev lbdev0
        ip link set lbdev0 up

        ipvsadm -A -t ${tip}:0 -s sh -p 360
$(while read -rd "," -r x; do
        echo "ipvsadm -a -t ${tip}:0 -r ${x}:0 -g -w 1"
done <<< "${rip_lst},"
)
        ipvsadm -A -u ${tip}:0 -s sh -p 360
$(while read -rd "," -r x; do
        echo "ipvsadm -a -u ${tip}:0 -r ${x}:0 -g -w 1"
done <<< "${rip_lst},"
)
EOF
}

setup_realsrv() {
    local ns_name="${1}"
    local vip="${2}"
    maybe_netns_run "bash -s" "${ns_name}" <<EOF
#     ip addr add ${vip} dev lo
# # OR
    ip link add name lbdev0 type dummy
    ip a a ${vip} dev lbdev0
    ip link set lbdev0 up
    sysctl -w net.ipv4.conf.all.arp_ignore=1
    sysctl -w net.ipv4.conf.all.arp_announce=2
EOF
cat <<EOF
arp_ignore - INTEGER
    Define different modes for sending replies in response to
    received ARP requests that resolve local target IP addresses:
    0 - (default): reply for any local target IP address, configured
    on any interface
    1 - reply only if the target IP address is local address
    configured on the incoming interface
    2 - reply only if the target IP address is local address
    configured on the incoming interface and both with the
    sender's IP address are part from same subnet on this interface
    3 - do not reply for local addresses configured with scope host,
    only resolutions for global and link addresses are replied
    4-7 - reserved
    8 - do not reply for all local addresses
arp_announce - INTEGER
    Define different restriction levels for announcing the local
    source IP address from IP packets in ARP requests sent on
    interface:
    0 - (default) Use any local address, configured on any interface
    1 - Try to avoid local addresses that are not in the target's
    subnet for this interface. This mode is useful when target
    hosts reachable via this interface require the source IP
    address in ARP requests to be part of their logical network
    configured on the receiving interface. When we generate the
    request we will check all our subnets that include the
    target IP and will preserve the source address if it is from
    such subnet. If there is no such subnet we select source
    address according to the rules for level 2.
    2 - Always use the best local address for this target.
    In this mode we ignore the source address in the IP packet
    and try to select local address that we prefer for talks with
    the target host. Such local address is selected by looking
    for primary IP addresses on all our subnets on the outgoing
    interface that include the target IP address. If no suitable
    local address is found we select the first local address
    we have on the outgoing interface or on all other interfaces,
    with the hope we will receive reply for our request and
    even sometimes no matter the source IP address we announce.
EOF
}

gen_ospfd() {
    local ns=$1
    local route_id=$2
    local interfaces=$3
    local areas=$4
    local password="password"
    # passive-interface lo (skip lo ospf)
    cat <<EOF
log syslog all;
debug protocols all;
router id ${route_id};
protocol device {
    scan time 10;        # Scan interfaces every 10 seconds
}
# Disable automatically generating direct routes to all network interfaces.
protocol direct {
    disabled;         # Disable by default
}
# Forbid synchronizing BIRD routing tables with the OS kernel.
protocol kernel {
    ipv4 {                # Connect protocol to IPv4 table by channel
        import none;      # Import to table, default is import all
        export all;
    };
    merge paths yes limit 8;
}
# Static IPv4 routes.
protocol static {
    ipv4;
$(while read -rd "," -r x; do
    echo "    route ${x} via \"lbdev0\";"
done <<< "${areas},"
)
}
protocol ospf v2 uplink0 {
    # Cost一样的时候要不要启用负载均衡. ECMP默认是开的.
    ecmp yes;
    merge external yes;
    ipv4 {
        import all;
        # import where net !~ [10.65.2.0/24, 10.65.1.0/24];
        export all;
    };
    area 0.0.0.0 {
        interface "${interfaces}" {
            # 默认Cost是10, Cost越低选路优先. 注意这个Cost是单向向外的.
            cost 5;
            authentication cryptographic;
            password "${password}" {
                # algorithm hmac sha256;
                algorithm keyed md5;
            };
            # 链接类型定义. 由于是基于WireGuard的, 所以可以改成PTP网络, 会稍微减少消耗加快速度, 但实际用途不大.
            # type ptp;
        };
        interface "${interfaces}";
    };
}
EOF
}

post_create() {
    require bird tmux ipvsadm
    local lower="/" overlay= node= window=
    for node in R lvs1 lvs2; do
        overlay="${LAB_DIR}/${node}"
        mkdir -p "${overlay}"
        setup_overlayfs "${lower}" "${overlay}"
    done

    gen_ospfd "lvs1" "10.0.1.10" "lvs1-SW" "${VIP}" | create_file ${LAB_DIR}/lvs1/etc/bird/bird.conf
    gen_ospfd "lvs2" "10.0.1.11" "lvs2-SW" "${VIP}" | create_file ${LAB_DIR}/lvs2/etc/bird/bird.conf
    gen_ospfd "R" "10.0.1.1" "R-SW" "10.0.1.0/24"   | create_file ${LAB_DIR}/R/etc/bird/bird.conf

    for node in R lvs1 lvs2; do
        overlay="${LAB_DIR}/${node}"
        window=${node}
        maybe_tmux_netns_chroot "${SESS}" "${window}" "${node}" "${overlay}" || error_msg "maybe_tmux_netns_chroot error\n"
        tmux_input "${SESS}" "${window}" "mount -t proc none /proc
        #maybe chroot env /dev/null not exist, zebra need it"
        tmux_input "${SESS}" "${window}" "[ -e '/dev/null' ] || mknod -m 666 /dev/null c 1 3"
        # systemd-run --unit bird2-${node} -- ip netns exec ${TEST_SVC} /usr/sbin/sshd -D
        tmux_input "${SESS}" "${window}" "mkdir -p /run/bird && /sbin/bird -P /run/bird/bird.pid"
        #start-stop-daemon --start --quiet --background --exec /sbin/zebra
    done
    setup_lvs "lvs1" "${VIP}" "10.0.1.100,10.0.1.101"
    setup_lvs "lvs2" "${VIP}" "10.0.1.100,10.0.1.101"
    setup_realsrv "srv1" "${VIP}"
    setup_realsrv "srv2" "${VIP}"
    for node in srv1 srv2 cli1 cli2; do
        window=${node}
        maybe_tmux_netns_chroot "${SESS}" "${window}" "${node}"
    done

    return 0;
}

pre_cleanup() {
    local node=
    tmux kill-session -t "${SESS}"

    for node in R lvs1 lvs2; do
        overlay="${LAB_DIR}/${node}"
        kill -9 $(maybe_netns_run "cat /run/bird/bird.pid"  "${node}" "${overlay}/")
        cleanup_overlayfs "${overlay}"
        rm -rf "${overlay}"
    done
    return 0;
}
