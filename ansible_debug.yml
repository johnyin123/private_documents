# [local] 
# 10.0.2.10 ansible_user=johnyin ansible_ssh_pass=password ansible_port=60022 ansible_become_pass=xxxxx@2018
# 
# [host2] 
# 10.0.2.10:60022 ansible_become_pass=xxxxx@2018
# 
# 
# [bj]
# 10.4.30.[2:149]

# ansible-playbook debug.yml -i hosts --user=root -e '{ "env": "local" }' -k
# ansible-playbook debug.yml -i hosts -e '{ "env": "local", log: 0 }'

# ansible-playbook example.yml – tags "configuration,packages"
# ansible-playbook example.yml – skip-tags "configuration"
---
- name: Print debug infomation eg1 
  hosts: "{{ env }}"
  gather_facts: yes
  connection: ssh # or paramiko

  vars:
    listen_port: 8080
    data: $(date)
    distro: ${ansible_distribution}
    pkg_mgr: ${ansible_pkg_mgr}
    pbname: ${inventory_hostname}
    parent:
      child1: true

  tasks: 
  - name: Display all variables/facts known for a host
    debug:
      msg: "hosts = {{ env }}"
      verbosity: "{{ log }}"
  - debug: var=ansible_all_ipv4_addresses
  - debug: var=ansible_default_ipv4.address
  - debug: msg="System {{ inventory_hostname }} has gateway {{ ansible_default_ipv4.gateway }}"
    when: ansible_default_ipv4.gateway is defined

  - name: multiple commands
    shell: |
      cd /etc
      ls -lh
      cat hosts
    register: rst_msg 

  - debug:
      var: rst_msg.stdout
      verbosity: "{{ log }}" 

  - name: Command run line  yum
    shell: id
    register: result 
    when: ansible_pkg_mgr == "yum"

  - debug:
      var: result.stdout
      verbosity: "{{ log }}" 
    when: ansible_pkg_mgr == "yum"

  - name: Command run line apt
    shell: id
    register: result 
    when: ansible_pkg_mgr == "apt"

  - debug:
      var: result.stdout
      verbosity: "{{ log }}" 
    when: ansible_pkg_mgr == "apt"

  - name: Run as root
    become_user: root
    become_method: su
    become: yes
    shell: id
    register: result2
    notify:
      - do your notify

  - fail:
      msg: "fail test"
    when: ansible_pkg_mgr == "apt"

  - debug:
      var=result2.stdout verbosity="{{ log }}"

  - shell: /usr/bin/uptime
    register: uptime

  - name: "Reboot Server"
    shell: sleep 2 && shutdown -r now "Ansible updates triggered"
    async: 1
    poll: 0
    ignore_errors: true
    when: uptime.changed

  - name: "Waiting for server to come back"
    local_action: wait_for host={{ inventory_hostname }}
                  state=started
                  delay=30
                  timeout=30
                  connect_timeout=15
    when: uptime.changed

  - debug:
      var: uptime
      verbosity: "{{ log }}" 

  - name: Set nofile and nproc limits
    blockinfile:
      dest: /etc/security/limits.d/99-tunning.conf
      create: yes
      mode: 0644
      block: |
        * soft nofile 1024000
        * hard nofile 1024000
        * soft nproc 32768
        * hard nproc 32768
      marker: "# {mark} ANSIBLE MANAGED BLOCK"

  - name: change soft /etc/security/limits.conf
    lineinfile:
      dest: /etc/security/limits.conf
      regexp: '^\* soft nofile'
      line: "* soft nofile {{ ulimit_num | default('65536') }}"

  - name: Disable TCP timestamps
    sysctl:
      name="net.ipv4.tcp_timestamps"
      value=0
      sysctl_set=yes
      state=present
      reload=yes

  - name: Disable UseDNS in ssh config
    lineinfile:
      dest=/etc/ssh/sshd_config
      line='UseDNS no'
      regexp='(#|)\s*UseDNS\s*'
      state=present

  - name: Configuring ssh to allow root logins
    lineinfile:
      dest: "/etc/ssh/sshd_config"
      regexp: "^PermitRootLogin"
      line: "PermitRootLogin yes"

  - name:      set PasswordAuthentication yes 
    become:    yes
    replace:   dest=/etc/ssh/sshd_config regexp="^PasswordAuthentication no" replace="PasswordAuthentication yes"

  - name:      reload sshd service
    become:    yes
    service:   name=sshd state=reloaded 

  - name: Disable the firewalld service
    service:
      name: "firewalld"
      enabled: no
    ignore_errors: true

  - name: "Updating selinux for Magento -- tags: bootstrap, selinux"
    lineinfile:
      dest: /etc/selinux/config
      regexp: "^SELINUX="
      line: 'SELINUX=disabled'
      backrefs: yes
      state: present

  - name: install packages
    package: name={{ item }} state=present
    with_items:
    - rsync
    - telnet
    - lsof
    - strace
    - ltrace
    - python-virtualenv

  - name: 验证服务是否关闭
    wait_for: port={{ listen_port }} delay=3 state=stopped timeout=10

  - name: 等待服务启动
    wait_for: host=0.0.0.0  port=10050 delay=5 timeout=30

  - name: tags 测试正常
    shell: echo "hello"

  - sysctl: 
      name: net.ipv4.ip_local_port_range
      value: "1024 65531" 
      state: present
      reload: yes

  - name: add host record to center server 
    local_action: shell 'echo "192.168.1.100 test.xyz.com " >> /etc/hosts'

  - name: add host record to center server 
    shell: 'echo "192.168.1.100 test.xyz.com " >> /etc/hosts'
    delegate_to: 192.168.1.1

  - name: this will not be counted as a failure 
    command: /bin/false 
    ignore_errors: yes

  - name: show variable
    debug:
      var: parent
  - name: "Check if variable is defined"
    fail:
      msg: "mandatory variable item not passed as extra args when invoking playbook"
    when: "{{item}} is not defined"
    loop:
    - parent
    - parent.child1
    - parent.child2

  handlers:  
    - name: do your notify
      become_user: root
      become_method: su
      become: yes
      service: name=crond enabled=yes state=restarted
      register: service
...
---
# - name: install router packages
#   yum:
#    name: [ 'quagga.x86_64', 'ipset.x86_64', 'ipset-service.noarch', 'tcpdump', 'nmap', 'iptraf-ng' ]
#    state: installed

# Playbook的核心元素：
#     hosts：主机
#     tasks：任务列表
#     variables   变量
#     templates：包含了模板语法的文本文件；
#     handlers：由特定条件触发的任务；
#     playbooks配置文件的基础组件：
#     hosts：运行指定任务的目标主机；
#     remoute_user: 在远程主机上执行任务的用户；
#     sudo_user：sudo权限的用户
#     tasks：任务列表

#  ansible_user # ssh用户
#  ansible_ssh_pass # 密码
#  ansible_port # ssh端口
#  ansible_become # true or false，是否切换用户
#  ansible_become_method # 切换用户使用的方法，如sudo、su
#  ansible_become_user # 要切换的用户
#  ansible_become_pass # 切换用户是需要的密码

# ansible-playbook 执行每一个任务所花费的时间
#  cd /etc/ansible 
#  mkdir callback_plugins 
#  cd callback_plugins 
#  wget https://raw.githubusercontent.com/jlafon/ansible-profile/master/callback_plugins/profile_tasks.py
#
#
# SSH pipelining 是一个加速 Ansible 执行速度的简单方法。
# ssh pipelining 默认是关闭，之所以默认关闭是为了兼容不同的sudo配置，
# 主要是 requiretty 选项。如果不使用 sudo，建议开启。
# 打开此选项可以减少 ansible 执行没有传输时 ssh 在被控机器上执行任务的连接数。
# 不过，如果使用 sudo，必须关闭 requiretty 选项。修改 /etc/ansible/ansible.cfg 文件可以开启pipelining=True
