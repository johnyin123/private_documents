# The default coredump filename is "core". By setting core_uses_pid to 1, the coredump filename becomes core.PID.
kernel.core_uses_pid = 1
# This value denotes the maximum number of file-handles that the Linux kernel will allocate.
fs.file-max = 2097152
# Maximum number  of  packets,  queued  on  the  INPUT  side, when the interface receives packets faster than kernel can process them.
net.core.netdev_max_backlog = 262144
# The default setting of the socket receive buffer in bytes
net.core.rmem_default = 31457280
# The maximum receive socket buffer size in bytes.
net.core.rmem_max = 67108864
# The default setting (in bytes) of the socket send buffer.
net.core.wmem_default = 31457280
# The maximum send socket buffer size in bytes.
net.core.wmem_max = 67108864
# Limit of socket listen() backlog
net.core.somaxconn = 65535
# Maximum ancillary buffer size allowed per socket. Ancillary data is a sequence
# of struct cmsghdr structures with appended data.
net.core.optmem_max = 25165824
# Minimum number of stored ARP records is indicated which is not cleared.
net.ipv4.neigh.default.gc_thresh1 = 4096
# The amount after which the records begin to be cleaned after 5 seconds
net.ipv4.neigh.default.gc_thresh2 = 8192
# The amount upon reaching which the records begin to be cleared immediately
net.ipv4.neigh.default.gc_thresh3 = 16384
# How frequently the garbage collector for neighbour entries should attempt to run.
net.ipv4.neigh.default.gc_interval = 5
# Determines how often to check for stale neighbour entries. When a neighbour entry is considered stale it is resolved again before sending data to it.
net.ipv4.neigh.default.gc_stale_time = 120
# Size of connection tracking table.
net.netfilter.nf_conntrack_max = 10000000
# If it is set to zero, we disable picking up already established connections.
net.netfilter.nf_conntrack_tcp_loose = 0
# Timeout for established (in seconds)
net.netfilter.nf_conntrack_tcp_timeout_established = 1800
# Timeout for close (in seconds)
net.netfilter.nf_conntrack_tcp_timeout_close = 10
# Timeout for close wait (in seconds)
net.netfilter.nf_conntrack_tcp_timeout_close_wait = 10
# Timeout for fin wait (in seconds)
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 20
# Timeout for last ack (in seconds)
net.netfilter.nf_conntrack_tcp_timeout_last_ack = 20
# Timeout for syn recv (in seconds)
net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 20
# Timeout for syn sent (in seconds)
net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 20
# Timeout for time wait (in seconds)
net.netfilter.nf_conntrack_tcp_timeout_time_wait = 10
# The congestion window size in MSS of a TCP connection after it has been idled (no segment received) for a period of one retransmission timeout (RTO).
net.ipv4.tcp_slow_start_after_idle = 0
# That defines the minimum and maximum port a networking connection can use as its source (local) port.
net.ipv4.ip_local_port_range = 1024 65000
# The maximum number of IPv4 routes allowed
net.ipv4.route.max_size = 8048576
# Ignore all incoming ICMP echo requests
net.ipv4.icmp_echo_ignore_all = 0
# Ignore ICMP echo requests to broadcast
net.ipv4.icmp_echo_ignore_broadcasts = 1
# Don't log invalid responses to broadcast
net.ipv4.icmp_ignore_bogus_error_responses = 1
# Set the congestion control algorithm to be used for new connections.
# Possible values: reno (default), cubic, bic, htcp, vegas, westwood.
net.ipv4.tcp_congestion_control = htcp
# First param:  below this number of pages TCP is not bothered about its memory appetite.
# Second param: when amount of memory allocated by TCP exceeds this number of pages, TCP moderates its memory consumption and enters memory
#               pressure mode, which is exited when memory consumption falls under "min".
# Third param:  Number of pages allowed for queueing by all TCP sockets.
net.ipv4.tcp_mem = 65536 131072 262144
# The same as above but for the UDP protocol.
net.ipv4.udp_mem = 65536 131072 262144
# First param:  Minimal size of receive buffer used by TCP sockets. It is guaranteed to each TCP socket, even under moderate memory pressure.
# Second param: Initial size of receive buffer used by TCP sockets. This value overrides net.core.rmem_default used by other protocols.
# Third param:  maximal size of receive buffer allowed for automatically selected receiver buffers for TCP socket.
#               This value does not override net.core.rmem_max.  Calling setsockopt() with SO_RCVBUF disables
#               automatic tuning of that socket's receive buffer size, in which case this value is ignored.
net.ipv4.tcp_rmem = 4096 87380 33554432
# First param:  Amount of memory reserved for send buffers for TCP sockets. Each TCP socket has rights to use it due to fact of its birth.
# Second param: initial size of send buffer used by TCP sockets.
# Third param:  Maximal amount of memory allowed for automatically tuned send buffers for TCP sockets.
net.ipv4.tcp_wmem = 4096 87380 33554432
# Minimal size of receive buffer used by UDP sockets in moderation.
net.ipv4.udp_rmem_min = 16384
# Minimal size of send buffer used by UDP sockets in moderation.
net.ipv4.udp_wmem_min = 16384
# Maximal number of timewait sockets held by system simultaneously. If this number is exceeded time-wait socket is immediately destroyed
net.ipv4.tcp_max_tw_buckets = 1440000
# Enable or disable fast recycling of TIME_WAIT sockets. Known to cause some issues with hoststated (Load balancing and fail over)
net.ipv4.tcp_tw_recycle = 0
# This allows reusing sockets in TIME_WAIT state for new connections when it is safe from protocol viewpoint
net.ipv4.tcp_tw_reuse = 1
# Maximal number of TCP sockets not attached to any user file handle, held by system.
# If this number is exceeded orphaned connections are reset immediately and warning is printed.
net.ipv4.tcp_max_orphans = 400000
# Enable or disable window scaling as defined in RFC1323.
net.ipv4.tcp_window_scaling = 1
# If set, the TCP stack behaves conforming to RFC1337.
# If unset, we are not conforming to RFC, but prevent TCP TIME_WAIT assassination.
net.ipv4.tcp_rfc1337 = 1
# Send out syncookies when the syn backlog queue of a socket overflows. This is to prevent against the common 'SYN flood attack'
net.ipv4.tcp_syncookies = 1
# Number of times SYNACKs for a passive TCP connection attempt will be retransmitted.
net.ipv4.tcp_synack_retries = 1
# Number of times initial SYNs for an active TCP connection attempt will be retransmitted.
net.ipv4.tcp_syn_retries = 2
# Maximal number of remembered connection requests (SYN_RECV), which have not received an acknowledgment from connecting client.
net.ipv4.tcp_max_syn_backlog = 16384
# Enable or disable timestamps as defined in RFC1323 and use random offset for each connection rather than only using the current time.
net.ipv4.tcp_timestamps = 1
# Enable or disable select acknowledgments (SACKS)
net.ipv4.tcp_sack = 1
# Control use of Explicit Congestion Notification (ECN) by TCP. ECN is used only when both ends of the TCP connection indicate support for it.
# 0 Disable ECN
# 1 Enable ECN when requested by incoming connections and also request ECN on outgoing connection attempts.
# 2 Enable ECN when requested by incoming connections but do not request ECN on outgoing connections.
net.ipv4.tcp_ecn = 2
# The length of time an orphaned (no longer referenced by any application) connection will remain in the FIN_WAIT_2 state before it is aborted at the local end.
net.ipv4.tcp_fin_timeout = 10
# How often TCP sends out keepalive messages when keepalive is enabled.
net.ipv4.tcp_keepalive_time = 600
# How frequently the probes are send out. Multiplied by tcp_keepalive_probes it is time to kill not responding connection, after probes started.
net.ipv4.tcp_keepalive_intvl = 60
# How many keepalive probes TCP sends out, until it decides that the connection is broken.
net.ipv4.tcp_keepalive_probes = 10
# By default, TCP saves various connection metrics in the route cache when the connection closes, so that connections established in the
# near future can use these to set initial conditions.  Usually, this increases overall performance, but may sometimes cause performance degradation.
# If set, TCP will not cache metrics on closing connections.
net.ipv4.tcp_no_metrics_save = 1
# Forward Packets between interfaces.
net.ipv4.ip_forward = 0
# Accept ICMP redirect messages. (0 = Disabled)
net.ipv4.conf.all.accept_redirects = 0
# Send redirects, if router. (0 = Disabled)
net.ipv4.conf.all.send_redirects = 0
# Accept packets with SRR option. (0 = Disabled)
net.ipv4.conf.all.accept_source_route = 0
#   0 - No source validation.
#   1 - Strict mode as defined in RFC3704 Strict Reverse Path
#	    Each incoming packet is tested against the FIB and if the interface
#	    is not the best reverse path the packet check will fail.
#	    By default failed packets are discarded.
#   2 - Loose mode as defined in RFC3704 Loose Reverse Path
#	    Each incoming packet's source address is also tested against the FIB
#	    and if the source address is not reachable via any interface
#	    the packet check will fail.
net.ipv4.conf.all.rp_filter = 1
# Do multicast routing (0 = Disabled)
net.ipv4.conf.all.mc_forwarding = 0
# Log packets with impossible addresses to kernel log.
net.ipv4.conf.all.log_martians = 1
# This option can be used to select the type of process address space randomization that is used in the system, for architectures that support this feature.
kernel.randomize_va_space = 1
# Exec Shield is a project that got started at Red Hat, Inc in late 2002 with the aim of reducing the risk of worm or other automated remote attacks on Linux systems.
kernel.exec-shield = 1
# Disable proxy arp
net.ipv4.conf.all.proxy_arp = 0
# Enable secure redirects, i.e. only accept ICMP redirects for gateways
net.ipv4.conf.all.secure_redirects = 1
# Disable bootp_relay
net.ipv4.conf.all.bootp_relay = 0
# Ensure that subsequent connections use the new values
net.ipv4.route.flush = 1

net.ipv6.conf.all.disable_ipv6=1 #禁用IPv6，修为0为启用IPv6
net.ipv6.conf.default.disable_ipv6=1 #禁用IPv6，修为0为启用IPv6
net.ipv6.conf.lo.disable_ipv6=1 #禁用IPv6，修为0为启用IPv6
net.ipv4.neigh.default.gc_stale_time=120 #ARP缓存条目超时
net.ipv4.conf.default.rp_filter=0 #不开启源地址校验
net.ipv4.conf.default.arp_announce=2 #始终使用与目的IP地址对应的最佳本地IP地址作为ARP请求的源IP地址
net.ipv4.conf.lo.arp_announce=2 #始终使用与目的IP地址对应的最佳本地IP地址作为ARP请求的源IP地址
net.ipv4.conf.all.arp_announce=2 #始终使用与目的IP地址对应的最佳本地IP地址作为ARP请求的源IP地址
net.bridge.bridge-nf-call-ip6tables=1 # 是否在ip6tables链中过滤IPv6包
net.bridge.bridge-nf-call-iptables=1 # 二层的网桥在转发包时也会被iptables的FORWARD规则所过滤，这样有时会出现L3层的iptables rules去过滤L2的帧的问题
net.netfilter.nf_conntrack_max=2310720 #连接跟踪表的大小，建议根据内存计算该值CONNTRACK_MAX = RAMSIZE (in bytes) / 16384 / (x / 32)，并满足nf_conntrack_max=4*nf_conntrack_buckets，默认262144

net.ipv6.neigh.default.gc_thresh1=8192
net.ipv6.neigh.default.gc_thresh2=32768
net.ipv6.neigh.default.gc_thresh3=65536

#gc_thresh3 是表大小的绝对限制
#gc_thresh2 设置为等于系统的最大预期邻居条目数的值
#在这种情况下，gc_thresh3 应该设置为一个比 gc_thresh2 值高的值，例如，比 gc_thresh2 高 25%-50%，将其视为浪涌容量。
#gc_thresh1 提高到较大的值；此设置的作用是，如果表包含的条目少于 gc_thresh1，内核将永远不会删除（超时）过时的条目。

net.core.somaxconn = 32768 # 第二个积压队列长度
fs.inotify.max_user_instances=8192 # 表示每一个real user ID可创建的inotify instatnces的数量上限，默认128.
fs.inotify.max_user_watches=524288 # 同一用户同时可以添加的watch数目，默认8192。
fs.nr_open=52706963 #设置最大微博号打开数
kernel.pid_max = 4194303 #最大进程数
net.bridge.bridge-nf-call-arptables=1 #是否在arptables的FORWARD中过滤网桥的ARP包
vm.swappiness=0 # 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它
vm.overcommit_memory=1 # 不检查物理内存是否够用
vm.panic_on_oom=0 # 开启 OOM
vm.max_map_count = 262144

