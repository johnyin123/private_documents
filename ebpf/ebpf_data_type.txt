##################################################
1: BPF_MAP_TYPE_HASH
最简单的hashmap, 初始化时需要指定支持的最大条目数(max_entries),满了之后继续插入数据时，会报E2BIG错误。
场景一：将内核态得到的数据，传递给用户态程序
场景二：存放全局配置信息，供 BPF 程序使用

将内核态数据传递到用户态：samples/bpf/sockex2
BPF过滤网络设备设备上的包，统计包数和字节数，并以目的IP地址为key将统计信息写到map：
// samples/bpf/sockex2_kern.c
struct {
    __uint(type, BPF_MAP_TYPE_HASH);  // BPF map 类型
    __type(key, __be32);              // 目的 IP 地址
    __type(value, struct pair);       // 包数和字节数
    __uint(max_entries, 1024);        // 最大 entry 数量
} hash_map SEC(".maps");

SEC("socket2")
int bpf_prog2(struct __sk_buff *skb)
{
    flow_dissector(skb, &flow);

    key = flow.dst; // 目的 IP 地址
    value = bpf_map_lookup_elem(&hash_map, &key);
    if (value) {    // 如果已经存在，则更新相应计数
        __sync_fetch_and_add(&value->packets, 1);
        __sync_fetch_and_add(&value->bytes, skb->len);
    } else {        // 否则，新建一个 entry
        struct pair val = {1, skb->len};
        bpf_map_update_elem(&hash_map, &key, &val, BPF_ANY);
    }
    return 0;
}
##################################################
2: BPF_MAP_TYPE_PERCPU_HASH
使用场景
基本同上。
samples/bpf/map_perf_test_kern.c
##################################################
3: BPF_MAP_TYPE_LRU_HASH
4: BPF_MAP_TYPE_LRU_PERCPU_HASH
普通hashmap的问题是有大小限制。LRU map如果满了,再插入时它会自动将最久未被使用（least recently used）的entry移除。
场景一：连接跟踪（conntrack）表、NAT 表等固定大小哈希表
samples/bpf/map_perf_test_kern.c
##################################################
5: BPF_MAP_TYPE_HASH_OF_MAPS
map-in-map：第一个map内的元素是指向另一个map的指针。与后面将介绍的BPF_MAP_TYPE_ARRAY_OF_MAPS类似，但外层map使用的是哈希而不是数组。
可以将整个（内层）map在运行时实现原子替换。
场景一：map-in-map
samples/bpf/test_map_in_map_kern.c
##################################################
6: BPF_MAP_TYPE_ARRAY
7: BPF_MAP_TYPE_PERCPU_ARRAY
最大的特点：key就是数组中的索引（index）（因此key一定是整形），因此无需对key进行哈希。
使用场景：key是整形
samples/bpf/sockex1
根据协议类型（proto as key）统计流量.
struct {
    __uint(type, BPF_MAP_TYPE_ARRAY);
    __type(key, u32);                  // L4 协议类型（长度是 uint8），例如 IPPROTO_TCP，范围是 0~255
    __type(value, long);               // 累计包长（skb->len）
    __uint(max_entries, 256);
} my_map SEC(".maps");

SEC("socket1")
int bpf_prog1(struct __sk_buff *skb)
{
    int index = load_byte(skb, ETH_HLEN + offsetof(struct iphdr, protocol)); // L4 协议类型
    if (skb->pkt_type != PACKET_OUTGOING)
        return 0;
    // 注意：在用户态程序和这段 BPF 程序里都没有往 my_map 里插入数据；
    //   * 如果这是 hash map 类型，那下面的 lookup 一定失败，因为我们没插入过任何数据；
    //   * 但这里是 array 类型，而且 index 表示的 L4 协议类型，在 IP 头里占一个字节，因此范围在 255 以内；
    //     又 map 的长度声明为 256，所以这里的 lookup 一定能定位到 array 的某个位置，即查找一定成功。
    value = bpf_map_lookup_elem(&my_map, &index);
    if (value)
        __sync_fetch_and_add(value, skb->len);

    return 0;
}
##################################################
8: BPF_MAP_TYPE_PROG_ARRAY
程序数组，尾调用bpf_tail_call()时会用到。
key：任意整形（因为要作为array index），具体表示什么由使用者设计（例如表示协议类型proto）。
value：BPF程序的文件描述符（fd）。
使用场景：尾调用（tail call）
samples/bpf/sockex3
根据协议类型尾调用到下一层parser
##################################################
9: BPF_MAP_TYPE_PERF_EVENT_ARRAY
使用场景：保存tracing结果
samples/bpf/trace_output_kern.c
保存 perf event
struct bpf_map_def SEC("maps") my_map = {
    .type = BPF_MAP_TYPE_PERF_EVENT_ARRAY,
    .key_size = sizeof(int),
    .value_size = sizeof(u32),
    .max_entries = 2,
};

SEC("kprobe/sys_write")
int bpf_prog1(struct pt_regs *ctx)
{
    struct S {
        u64 pid;
        u64 cookie;
    } data;
    data.pid = bpf_get_current_pid_tgid();
    data.cookie = 0x12345678;
    bpf_perf_event_output(ctx, &my_map, 0, &data, sizeof(data));
    return 0;
}
##################################################
10: BPF_MAP_TYPE_ARRAY_OF_MAPS
使用场景：map-in-map
map-in-map，values是指向内层map的fd。只支持两层map。two levels of map，也就是一层map嵌套另一层map。
BPF_MAP_TYPE_PROG_ARRAY类型的BPF程序不支持map-in-map功能，因为这会使tail call的verification更加困难。
samples/bpf/map_perf_test_kern.c
samples/bpf/test_map_in_map_kern.c
##################################################
11: BPF_MAP_TYPE_CGROUP_ARRAY
在用户空间存放cgroup fds，用来检查给定的skb是否与cgroup_array[index]指向的cgroup关联。
使用场景
场景一：cgroup 级别的包过滤（拒绝/放行）
场景二：cgroup 级别的进程过滤（权限控制等）
samples/bpf/test_cgrp2_array_pin.c
程序功能： 将cgroupv2 array pin到BPFFS更新pinned cgroupv2 array
    if (create_array) {
        array_fd = bpf_create_map(BPF_MAP_TYPE_CGROUP_ARRAY, sizeof(uint32_t), sizeof(uint32_t), 1, 0);
    } else {
        array_fd = bpf_obj_get(pinned_file);
    }
    bpf_map_update_elem(array_fd, &array_key, &cg2_fd, 0);
    if (create_array) {
        ret = bpf_obj_pin(array_fd, pinned_file);
    }
samples/bpf/test_cgrp2_tc_kern.c
CGroup 级别的包过滤：核心是调用bpf_skb_under_cgroup()判断skb是否在给定cgroup中
struct bpf_elf_map SEC("maps") test_cgrp2_array_pin = {
    .type        = BPF_MAP_TYPE_CGROUP_ARRAY,
    .size_key    = sizeof(uint32_t),
    .size_value  = sizeof(uint32_t),
    .pinning     = PIN_GLOBAL_NS,
    .max_elem    = 1,
};
SEC("filter")
int handle_egress(struct __sk_buff *skb)
{
    ...
    if (bpf_skb_under_cgroup(skb, &test_cgrp2_array_pin, 0) != 1) {
        bpf_trace_printk(pass_msg, sizeof(pass_msg));
        return TC_ACT_OK;
    }
    ...
}
samples/bpf/test_current_task_under_cgroup_kern.c
判断进程是否在给定 cgroup 中,调用bpf_current_task_under_cgroup()判断当前进程是否在给定cgroup中
struct bpf_map_def SEC("maps") cgroup_map = {
    .type            = BPF_MAP_TYPE_CGROUP_ARRAY,
    .key_size        = sizeof(u32),
    .value_size        = sizeof(u32),
    .max_entries    = 1,
};
/* Writes the last PID that called sync to a map at index 0 */
SEC("kprobe/sys_sync")
int bpf_prog1(struct pt_regs *ctx)
{
    ...
    if (!bpf_current_task_under_cgroup(&cgroup_map, 0))
        return 0;
    ...
}
##################################################
12: BPF_MAP_TYPE_CGROUP_STORAGE
13: BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE
Attach到一个cgroup的所有BPF程序，会共用一组cgroup storage，包括：
    for (stype = 0; stype < MAX_BPF_CGROUP_STORAGE_TYPE; stype++)
        storages[stype] = bpf_cgroup_storage_alloc(prog, stype);
这里的types目前只有两种：shared,per-cpu
场景一：cgroup 内所有 BPF 程序的共享存储
samples/bpf/hbm_kern.h：host bandwidth manager
struct {
    __uint(type, BPF_MAP_TYPE_CGROUP_STORAGE);
    __type(key, struct bpf_cgroup_storage_key);
    __type(value, struct hbm_vqueue);
} queue_state SEC(".maps");
##################################################
14: BPF_MAP_TYPE_STACK_TRACE
内核程序能通过bpf_get_stackid() helper存储stack信息。将stack信息关联到一个id，而这个id是对当前栈的指令指针地址（instruction pointer address）进行32-bit hash 得到的。
场景一：存储profiling信息
在内核中获取stack id，用它作为key更新另一个map。例如通过对指定的stack traces进行profiling，统计它们的出现次数，或者将stack trace信息与当前pid关联起来。
samples/bpf/offwaketime_kern.c
打印调用栈
##################################################
15: BPF_MAP_TYPE_RINGBUF
依赖：内核5.7+。
场景一：更高效、保证事件顺序地往用户空间发送数据
替代perf event array
perfbuf是per-CPU环形缓冲区（circular buffers），能实现高效的“内核-用户空间”数据交互，在实际中也非常有用，但per-CPU的设计导致两个严重缺陷：
    内存使用效率低下（inefficient use of memory）
    事件顺序无法保证（event re-ordering）
ringbuf是一个“多生产者、单消费者”（multi-producer, single-consumer，MPSC）队列
# http://arthurchiao.art/blog/bpf-ringbuf-zh/
// 声明一个 perfbuf map。几点注意：
// 1. 不用特意设置 max_entries，libbpf 会自动将其设置为 CPU 数量；
// 2. 这个 map 的 per-CPU buffer 大小是 userspace 设置的，后面会看到
struct {
	__uint(type, BPF_MAP_TYPE_PERF_EVENT_ARRAY); // perf buffer (array)
	__uint(key_size, sizeof(int));
	__uint(value_size, sizeof(int));
} pb SEC(".maps");

// 一个 struct event 变量的大小超过了 512 字节，无法放到 BPF 栈上，
// 因此声明一个 size=1 的 per-CPU array 来存放 event 变量
struct {
	__uint(type, BPF_MAP_TYPE_PERCPU_ARRAY);    // per-cpu array
	__uint(max_entries, 1);
	__type(key, int);
	__type(value, struct event);
} heap SEC(".maps");

SEC("tp/sched/sched_process_exec")
int handle_exec(struct trace_event_raw_sched_process_exec *ctx)
{
	unsigned fname_off = ctx->__data_loc_filename & 0xFFFF;
	struct event *e;
	int zero = 0;

	e = bpf_map_lookup_elem(&heap, &zero);
	if (!e) /* can't happen */
		return 0;

	e->pid = bpf_get_current_pid_tgid() >> 32;
	bpf_get_current_comm(&e->comm, sizeof(e->comm));
	bpf_probe_read_str(&e->filename, sizeof(e->filename), (void *)ctx + fname_off);

	// 发送事件，参数列表 <context, &perfbuf, flag, event, sizeof(event)>
	bpf_perf_event_output(ctx, &pb, BPF_F_CURRENT_CPU, e, sizeof(*e));
	return 0;
}
--- src/perfbuf-output.bpf.c	2020-10-25 18:52:22.247019800 -0700
+++ src/ringbuf-output.bpf.c	2020-10-25 18:44:14.510630322 -0700
@@ -6,12 +6,11 @@
 
 char LICENSE[] SEC("license") = "Dual BSD/GPL";
 
-/* BPF perfbuf map */
+/* BPF ringbuf map */
 struct {
-	__uint(type, BPF_MAP_TYPE_PERF_EVENT_ARRAY);
-	__uint(key_size, sizeof(int));
-	__uint(value_size, sizeof(int));
-} pb SEC(".maps");
+	__uint(type, BPF_MAP_TYPE_RINGBUF);
+	__uint(max_entries, 256 * 1024 /* 256 KB */);
+} rb SEC(".maps");
 
 struct {
 	__uint(type, BPF_MAP_TYPE_PERCPU_ARRAY);
@@ -35,7 +34,7 @@
 	bpf_get_current_comm(&e->comm, sizeof(e->comm));
 	bpf_probe_read_str(&e->filename, sizeof(e->filename), (void *)ctx + fname_off);
 
-	bpf_perf_event_output(ctx, &pb, BPF_F_CURRENT_CPU, e, sizeof(*e));
+	bpf_ringbuf_output(&rb, e, sizeof(*e), 0);
 	return 0;
 }
用户空间
A:
-void handle_event(void *ctx, int cpu, void *data, unsigned int data_sz)
+int handle_event(void *ctx, void *data, size_t data_sz)
B:
 	/* Set up ring buffer polling */
-	pb_opts.sample_cb = handle_event;
-	pb = perf_buffer__new(bpf_map__fd(skel->maps.pb), 8 /* 32KB per CPU */, &pb_opts);
-	if (libbpf_get_error(pb)) {
+	rb = ring_buffer__new(bpf_map__fd(skel->maps.rb), handle_event, NULL, NULL);
+	if (!rb) {
 		err = -1;
-		fprintf(stderr, "Failed to create perf buffer\n");
+		fprintf(stderr, "Failed to create ring buffer\n");
 		goto cleanup;
 	}

 	while (!exiting) {
-		err = perf_buffer__poll(pb, 100 /* timeout, ms */);
+		err = ring_buffer__poll(rb, 100 /* timeout, ms */);
 		/* Ctrl-C will cause -EINTR */
 		if (err == -EINTR) {
 			err = 0;
 			break;
 		}
 		if (err < 0) {
-			printf("Error polling perf buffer: %d\n", err);
+			printf("Error polling ring buffer: %d\n", err);
 			break;
 		}
##################################################
16: BPF_MAP_TYPE_PERF_EVENT_ARRAY
场景一：Perf events
BPF程序将数据存储在mmap()共享内存中，用户空间程序可以访问。
非固定大小数据（不适合 map）
无需与其他BPF程序共享数据
samples/bpf/trace_output
    trace write() 系统调用
##################################################
17: BPF_MAP_TYPE_SOCKMAP
主要用于socket redirection：将socket信息插入到map，后面执行到bpf_sockmap_redirect()时，用map里的信息触发重定向。
场景一：socket redirection（重定向）
##################################################
18: BPF_MAP_TYPE_REUSEPORT_SOCKARRAY
配合BPF_PROG_TYPE_SK_REUSEPORT类型的BPF程序使用，加速socket查找。
场景一：配合_SK_REUSEPORT类型BPF程序，加速socket查找
##################################################
19: BPF_MAP_TYPE_SK_STORAGE
场景一：per-socket存储空间
samples/bpf/tcp_dumpstats_kern.c
在内核定期dump socket详情
struct {
    __u32 type;
    __u32 map_flags;
    int *key;
    __u64 *value;
} bpf_next_dump SEC(".maps") = {
    .type = BPF_MAP_TYPE_SK_STORAGE,
    .map_flags = BPF_F_NO_PREALLOC,
};

SEC("sockops")
int _sockops(struct bpf_sock_ops *ctx)
{
    struct bpf_tcp_sock *tcp_sk;
    struct bpf_sock *sk;
    __u64 *next_dump;

    switch (ctx->op) {
    case BPF_SOCK_OPS_TCP_CONNECT_CB:
        bpf_sock_ops_cb_flags_set(ctx, BPF_SOCK_OPS_RTT_CB_FLAG);
        return 1;
    case BPF_SOCK_OPS_RTT_CB:
        break;
    default:
        return 1;
    }

    sk = ctx->sk;
    next_dump = bpf_sk_storage_get(&bpf_next_dump, sk, 0, BPF_SK_STORAGE_GET_F_CREATE);
    now = bpf_ktime_get_ns();
    if (now < *next_dump)
        return 1;

    tcp_sk = bpf_tcp_sock(sk);
    *next_dump = now + INTERVAL;

    bpf_printk("dsack_dups=%u delivered=%u\n", tcp_sk->dsack_dups, tcp_sk->delivered);
    bpf_printk("delivered_ce=%u icsk_retransmits=%u\n", tcp_sk->delivered_ce, tcp_sk->icsk_retransmits);
    return 1;
}
##################################################
20: BPF_MAP_TYPE_SOCKHASH
场景一：XDP 重定向
tuning_loadbalance_cgroup
##################################################
21: BPF_MAP_TYPE_DEVMAP
22: BPF_MAP_TYPE_DEVMAP_HASH
功能与sockmap类似，但用于XDP场景，在bpf_redirect()时触发。
场景一：存放XDP配置信息
对于XDP程序来说，由于它们开始执行的位置非常靠前，此时大部分网络基础设施它们都是用不了的。因此引入了一些专门针对XDP的基础设施，例如这里的DEVMAP（对应TC场景下的普通BPF MAP）。
场景二：XDP redirection
samples/bpf/xdp_fwd_kern.c :存储 XDP 配置信息
samples/bpf/xdp_redirect_map_kern.c: XDP重定向
samples/bpf/xdp_router_ipv4_kern.c: 极简XDP路由器
##################################################
23: BPF_MAP_TYPE_CPUMAP
使用场景：XDP中将包重定向到指定CPU
24: BPF_MAP_TYPE_XSKMAP
都是XDP map，都可用于XDP socket重定向
samples/bpf/xdpsock_kern.c: XDP socket 重定向
##################################################
25: BPF_MAP_TYPE_LPM_TRIE
支持高效的longest-prefix matching。
场景一：存储 IP 路由等
samples/bpf/map_perf_test_kern.c
samples/bpf/xdp_router_ipv4_kern.c
##################################################
Map pinning
/* Object pinning settings */
#define PIN_NONE        0
#define PIN_OBJECT_NS   1
#define PIN_GLOBAL_NS   2 // 绑定到 `/sys/fs/bpf/tc/globals/` 下面
这个选项决定了以何种文件系统方式将 map 暴露出来。
例如，如果使用的是 libbpf 库，
可以通过 bpf_obj_pin(fd, path) 将 map fd 绑定到文件系统中的指定文件；
接下来，其他程序获取这个 fd，只需执行 bpf_obj_get(pinned_file)。
