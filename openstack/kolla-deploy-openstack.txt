kolla部署相关
一、环境要求
两张网卡
除系统盘外，至少1块磁盘
二、安装
kolla deploy

1、安装相关依赖
#CentOS
dnf install -y python3-devel libffi-devel gcc openssl-devel python3-libselinux python3-venv

#Ubuntu
apt install -y python3-dev libffi-dev gcc libssl-dev python3-venv
2、安装docker
aliyun 安装docker-ce

tsinghua 安装docker-ce

curl -sSL https://get.docker.io | bash

or

curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
3、python 虚拟环境
mkdir /kolla
python3 -m venv /kolla/venv3
source /kolla/venv3/bin/activate
4、禁用防火墙
setenforce 0
systemctl stop firewalld
systemctl disable firewalld

iptables -L
5、安装 kolla 和 kolla-ansible
cd /kolla

git clone -b stable/wallaby --depth=1 https://github.com/openstack/kolla
git clone -b stable/wallaby --depth=1 https://github.com/openstack/kolla-ansible

pip install ./kolla
pip install ./kolla-ansible

pip install docker python-openstackclient
6、复制配置文件globals.yml、password.yml到/etc中
cp -r kolla-ansible/etc/kolla /etc/
cp -r kolla-ansible/ansible/inventory/multinode .
7、修改multinode
[control]
node1 ansible_python_interpreter=/kolla/venv3/bin/python3

[network]
node1 ansible_python_interpreter=/kolla/venv3/bin/python3

[compute]
node1 ansible_python_interpreter=/kolla/venv3/bin/python3

[monitoring]
node1 ansible_python_interpreter=/kolla/venv3/bin/python3

[storage]
node1 ansible_python_interpreter=/kolla/venv3/bin/python3

[deployment]
node1 ansible_connection=local ansible_python_interpreter=/kolla/venv3/bin/python3
8、ceph 准备
部署参考，ceph部署

ceph osd pool create volumes 128
ceph osd pool create images 128
ceph osd pool create backups 128
ceph osd pool create vms 128

rbd pool init volumes
rbd pool init images
rbd pool init backups
rbd pool init vms

ceph auth get-or-create client.glance mon 'profile rbd' osd 'profile rbd pool=images'
ceph auth get-or-create client.cinder mon 'profile rbd' osd 'profile rbd pool=volumes, profile rbd pool=vms, profile rbd pool=images'
ceph auth get-or-create client.cinder-backup mon 'profile rbd' osd 'profile rbd pool=backups'

ceph auth get-or-create client.glance|tee ceph.client.glance.keyring
ceph auth get-or-create client.cinder|tee ceph.client.cinder.keyring
ceph auth get-or-create client.cinder-backup|tee ceph.client.cinder-backup.keyring
9、部署前配置
kolla-genpwd
tree /etc/kolla/config/
├── cinder
│   ├── ceph.client.cinder.keyring
│   ├── ceph.conf
│   ├── cinder-backup
│   │   ├── ceph.client.cinder-backup.keyring
│   │   ├── ceph.client.cinder.keyring
│   │   └── ceph.conf
│   └── cinder-volume
│       ├── ceph.client.cinder.keyring
│       └── ceph.conf
├── glance
│   ├── ceph.client.glance.keyring
│   └── ceph.conf
├── glance.conf
└── nova
    ├── ceph.client.cinder.keyring
    └── ceph.conf
vim /etc/kolla/globals.yaml

config_strategy: "COPY_ALWAYS"
kolla_base_distro: "ubuntu"
kolla_install_type: "source"
openstack_release: "wallaby"
kolla_internal_vip_address: "192.168.0.243"
kolla_external_vip_address: "{{ kolla_internal_vip_address }}"
docker_registry: 192.168.0.90:3000
docker_namespace: "kolla"
network_interface: "eno1"
neutron_external_interface: "eno2"
keepalived_virtual_router_id: "242"
enable_chrony: "yes"
enable_cinder: "yes"
enable_cinder_backup: "no"
enable_cyborg: "no"
enable_fluentd: "yes"
enable_magnum: "yes"
external_ceph_cephx_enabled: "yes"
ceph_glance_keyring: "ceph.client.glance.keyring"
ceph_glance_user: "glance"
ceph_glance_pool_name: "images"
ceph_cinder_keyring: "ceph.client.cinder.keyring"
ceph_cinder_user: "cinder"
ceph_cinder_pool_name: "volumes"
ceph_nova_keyring: "{{ ceph_cinder_keyring }}"
#ceph_nova_user: "nova"
ceph_nova_user: "{{ ceph_cinder_user }}"
ceph_nova_pool_name: "vms"
glance_backend_ceph: "yes"
glance_backend_file: "no"
cinder_backend_ceph: "yes"
nova_backend_ceph: "yes"
10、部署前检查（可选）
kolla-ansible -i /kolla/multinode prechecks
11、拉取镜像（可选）
kolla-ansible -i /kolla/multinode pull

kolla-ansible pull -e 'ansible_python_interpreter=/kolla/venv3/bin/python3'
12、部署
kolla-ansible -i /kolla/multinode deploy

# 只部署某些组件
kolla-ansible -i /kolla/multinode deploy --tags="haproxy"

# 过滤部署某些组件
kolla-ansible -i /kolla/multinode deploy --skip-tags="haproxy"
13、生成 admin-openrc.sh
kolla-ansible -i /kolla/multinode post-deploy
14、运行 init-runonce
init-runonce参考

cd /usr/share/kolla-ansible
vim init-runonce
./init-runonce
二、其他问题
1、ceph pg size问题
pool_pg_num 默认是128，用户需要根据需要进行修改,对于此平台我们提供以下计算公式供用户设定pool_pg_num。
40*osd_size >= replic_size *(8 + pool_pg_num)
注: osd_size为集群中osd的总数，此处即为所有存储服务器上用作存储的硬盘数目之和。
replic_size为每个pool的副本数，默认为3.
pool_pg_num是我们需要计算的pg数，pool_pg_num必须为2的N次方。
2、kolla-ansible自带工具
# 可用于从系统中移除部署的容器
/usr/local/share/kolla-ansible/tools/cleanup-containers

#可用于移除由于残余网络变化引发的docker启动的neutron-agents主机
/usr/local/share/kolla-ansible/tools/cleanup-host

#可用于从本地缓存中移除所有的docker image
/usr/local/share/kolla-ansible/tools/cleanup-images
3、mariadb集群出现故障
#!/bin/bash
ansible -i multinode all  -m shell -a 'docker stop mariadb'

ansible -i multinode all -m shell -a "sed -i 's/safe_to_bootstrap: 0/safe_to_bootstrap: 1/g' /var/lib/docker/volumes/mariadb/_data/grastate.dat"

kolla-ansible mariadb_recovery -i multinode
4、Some qemu processes were detected.\nDocker will not be able to stop the nova_libvirt container with those running.
pgrep qemu  ##查找qemu的进程ID
kill -9 <QEMU_ID>
5、清除 iptables 规则
iptables -F; iptables -X; iptables -Z
6、清除上次部署
kolla-ansible destroy -i multinode --yes-i-really-really-mean-it
7、rabbitmq异常
先重启所有节点rabbitmq（多适用于关机导致的异常）
ansible -i multinode all -m shell -a 'docker restart rabbitmq'
#Multiple different configurations with equal version numbers detected. Shutting down.

如果重启节点没用，再删除并重新部署所有节点rabbitmq（多适用于部署时出现的异常）
ansible -i multinode all -m shell -a 'docker rm -f rabbitmq'
ansible -i multinode all -m shell -a 'docker volume rm rabbitmq'
ansible -i multinode all -m shell -a 'rm -rf /etc/kolla/rabbitmq'
kolla-ansible deploy -i multinode
8、nova_libvirt异常
ansible -i multinode all -m shell -a 'rm -rf /var/run/libvirtd.pid;docker restart nova_libvirt nova_compute'
9、扩展
修改globals.yaml
若只是修改一些不涉及组件和镜像的配置（不增删容器），只需修改完globals后，upgrade、post-deploy即可
kolla-ansible upgrade -i multinode
kolla-ansible post-deploy -i multinode
若新开组件和关闭组件(包括增加新的容器，如新起osd容器)，以及更新openstack版本，不清理之前配置直接deploy即可
# Valid option is Docker repository tag
openstack_release: “4.0.0” #修改为最新的tag

kolla-ansible deploy -i multinode
kolla-ansible post-deploy -i multinode
如果修改了/etc/config/[server].conf
kolla-ansible reconfigure --tags [server] -i multinode
10、缩减
ceph
mon(例删除mon 10.0.0.1)
docker exec ceph_mon ceph mon dump
docker exec ceph_mon ceph mon rm 10.0.0.1
docker exec ceph_mon ceph osd crush remove 10.0.0.1
删除各个节点/var/lib/docker/volumes/ceph_mon_config/_data/ceph.conf对应条目
删除multinode对应条目
osd(例删除osd.0)
docker exec ceph_mon ceph osd out osd.0
docker exec ceph_mon ceph osd crush rm osd.0
docker exec ceph_mon ceph auth del osd.0
docker exec ceph_mon ceph osd down osd.0
docker exec ceph_mon ceph osd rm osd.0

openstack
减少controller（控制）节点
vim multinode 去掉相关控制节点
kolla-ansible deploy -i multinode
减少compute（计算）节点
openstack compute service list
openstack compute service delete ID
vim multinode 去掉相关计算节点
11、修改openstack容器内的源码
例nova-api：

docker exec -itu0 nova_api bash
cd /var/lib/kolla/venv/lib/python2.7/site-packages/nova/
12、指定python环境
kolla-ansible pull -e 'ansible_python_interpreter=/root/venv3/bin/python3'

kolla-ansible -e 'ansible_python_interpreter=/root/venv3/bin/python3' -i multinode prechecks

kolla-ansible -e 'ansible_python_interpreter=/root/venv3/bin/python3' -i multinode deploy
[control]
kolla1 ansible_python_interpreter=/root/venv3/bin/python3
kolla2 ansible_python_interpreter=/root/venv3/bin/python3
kolla3 ansible_python_interpreter=/root/venv3/bin/python3
13、防止部署neutron-dhcp-agent时失败，配置kolla.conf
# Create the drop-in unit directory for docker.service
mkdir -p /etc/systemd/system/docker.service.d

# Create the drop-in unit file
tee /etc/systemd/system/docker.service.d/kolla.conf <<-'EOF'
[Service]
MountFlags=shared
EOF

systemctl daemon-reload
systemctl restart docker
14、禁用宿主机的libvirt
# CentOS 7
systemctl stop libvirtd.service
systemctl disable libvirtd.service

# Ubuntu
service libvirt-bin stop
update-rc.d libvirt-bin disable
/usr/sbin/libvirtd: error while loading shared libraries:
libvirt-admin.so.0: cannot open shared object file: Permission denied
sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.libvirtd
15、旧版本，配置磁盘（新版本默认使用 bluestore）
[storage]
storage_node1_hostname ceph_osd_store_type=bluestore
storage_node2_hostname ceph_osd_store_type=bluestore
storage_node3_hostname ceph_osd_store_type=filestore
storage_node4_hostname ceph_osd_store_type=filestore

parted /dev/sdb -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP_BS 1 -1

# 日志和数据在同一个磁盘
parted /dev/xvdb -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1
parted /dev/xvdc -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1

ansible -i multinode all -m shell -a 'parted /dev/vdb -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1'

# 使用日志盘
parted /dev/vdb -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP_VDB 1 -1
parted /dev/vdc -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP_VDC 1 -1

parted /dev/vdd -s mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP_VDB_J 0% 5GB \
-s mkpart KOLLA_CEPH_OSD_BOOTSTRAP_VDC_J 5GB 100%

parted /dev/vdb print
parted /dev/vdc print
16、配置网络
bond0 宿主机网卡，管理网网卡（internel、存储。。。）
bond1：管理网外部网卡（public,vip）
bond2：外网网卡（浮动ip等，up网卡，不用配置ip）
bond3:存储网络、tunnel网络

ip addr show
ip link set bond2 up
17、添加config文件（可选）
mkdir /etc/kolla/config
cd /etc/kolla/config
touch ceph.conf
touch cinder.conf
touch nova.conf
touch keystone.conf
touch polling.yaml
[global]
osd pool default size = 3
osd pool default min size = 2
mon_max_pg_per_osd = 200
osd crush update on start = false
[DEFAULT]
enable_force_upload = true
[vnc]
novncproxy_base_url = http://111.111.111.111:6080/vnc_auto.html

[libvirt]
cpu_mode = host-passthrough
[token]
driver = keystone.token.backends.sql.Token
expiration = 86400
sources:
- interval: 180
  meters:
  - cpu
  - cpu_util
  - cpu_l3_cache
  - memory.usage
  - network.incoming.bytes
  - network.incoming.packets
  - network.outgoing.bytes
  - network.outgoing.packets
  - disk.device.read.bytes
  - disk.device.read.requests
  - disk.device.write.bytes
  - disk.device.write.requests
  - disk.device.usage
  - disk.device.iops
  name: some_pollsters
18、调整日志
ln -sf /var/lib/docker/volumes/kolla_logs/_data/ /var/log/kolla
19、格式转换与上次镜像
qemu-img convert -f qcow2 -O raw cirros-0.5.2-x86_64-disk.img cirros-0.5.2-x86_64-disk.raw
openstack image create --disk-format qcow2 --container-format bare --public --property os_type=linux --file cirros-0.5.2-x86_64-disk.img cirros
20、镜像
kolla/ubuntu-source-nova-compute:wallaby
kolla/ubuntu-source-cinder-volume:wallaby
kolla/ubuntu-source-nova-novncproxy:wallaby
kolla/ubuntu-source-cinder-api:wallaby
kolla/ubuntu-source-cinder-scheduler:wallaby
kolla/ubuntu-source-nova-conductor:wallaby
kolla/ubuntu-source-nova-ssh:wallaby
kolla/ubuntu-source-nova-api:wallaby
kolla/ubuntu-source-nova-scheduler:wallaby
kolla/ubuntu-source-keystone-ssh:wallaby
kolla/ubuntu-source-keystone:wallaby
kolla/ubuntu-source-keystone-fernet:wallaby
kolla/ubuntu-source-magnum-api:wallaby
kolla/ubuntu-source-magnum-conductor:wallaby
kolla/ubuntu-source-neutron-server:wallaby
kolla/ubuntu-source-placement-api:wallaby
kolla/ubuntu-source-horizon:wallaby
kolla/ubuntu-source-neutron-dhcp-agent:wallaby
kolla/ubuntu-source-neutron-metadata-agent:wallaby
kolla/ubuntu-source-neutron-l3-agent:wallaby
kolla/ubuntu-source-neutron-openvswitch-agent:wallaby
kolla/ubuntu-source-glance-api:wallaby
kolla/ubuntu-source-cyborg-agent:wallaby
kolla/ubuntu-source-cyborg-conductor:wallaby
kolla/ubuntu-source-cyborg-api:wallaby
kolla/ubuntu-source-heat-engine:wallaby
kolla/ubuntu-source-heat-api-cfn:wallaby
kolla/ubuntu-source-heat-api:wallaby
kolla/ubuntu-source-kolla-toolbox:wallaby
kolla/ubuntu-source-mariadb-server:wallaby
kolla/ubuntu-source-mariadb-clustercheck:wallaby
kolla/ubuntu-source-openvswitch-db-server:wallaby
kolla/ubuntu-source-nova-libvirt:wallaby
kolla/ubuntu-source-openvswitch-vswitchd:wallaby
kolla/ubuntu-source-rabbitmq:wallaby
kolla/ubuntu-source-fluentd:wallaby
kolla/ubuntu-source-memcached:wallaby
kolla/ubuntu-source-chrony:wallaby
kolla/ubuntu-source-cron:wallaby
kolla/ubuntu-source-keepalived:wallaby
kolla/ubuntu-source-haproxy:wallaby
三、添加节点
adding-and-removing-hosts

kolla-ansible -i <inventory> bootstrap-servers
kolla-ansible -i <inventory> pull
kolla-ansible -i <inventory> deploy
四、卸载节点
l3_id=$(openstack network agent list --host <host> --agent-type l3 -f value -c ID)
#target_l3_id=$(openstack network agent list --host <target host> --agent-type l3 -f value -c ID)
openstack router list --agent $l3_id -f value -c ID | while read router; do
  openstack network agent remove router $l3_id $router --l3
#  openstack network agent add router $target_l3_id $router --l3
done
openstack network agent set $l3_id --disable
dhcp_id=$(openstack network agent list --host <host> --agent-type dhcp -f value -c ID)
#target_dhcp_id=$(openstack network agent list --host <target host> --agent-type dhcp -f value -c ID)
openstack network list --agent $dhcp_id -f value -c ID | while read network; do
  openstack network agent remove network $dhcp_id $network --dhcp
#  openstack network agent add network $target_dhcp_id $network --dhcp
done
kolla-ansible -i <inventory> stop --yes-i-really-really-mean-it
openstack network agent list --host <host> -f value -c ID | while read id; do
  openstack network agent delete $id
done
openstack compute service list --os-compute-api-version 2.53 --host <host> -f value -c ID | while read id; do
  openstack compute service delete --os-compute-api-version 2.53 $id
done
openstack compute service set <host> nova-compute --disable
openstack server list --all-projects --host <host> -f value -c ID | while read server; do
  openstack server migrate --live-migration $server
done

####################################################################################################
kolla一键部署openstack
Kolla的目标：
（1）利用Docker产生生产级别的镜像加速OpenStack部署。
（2）简化OpenStack部署和运维操作。就是要做到100个节点开箱即用，所有的组件的HA都具备。简单说，Fuel装完是什么，他就是什么样子。实现的代价肯定比Fuel小很多。
准备工作：
1 - 最小化安装centos,关闭防火墙和selinux，并安装epel源：
#关闭防火墙和selinux
[root@all-in-one ~]# setenforce 0
[root@all-in-one ~]# getenforce 
Permissive
[root@all-in-one ~]# systemctl stop firewalld 
[root@all-in-one ~]# systemctl disable firewalld
Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.
Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.
[root@all-in-one ~]# systemctl status firewalld |grep active
   Active: inactive (dead)
#安装epel源
[root@all-in-one ~]# yum install epel-release -y
#更改IP
[root@all-in-one ~]# nmcli connection modify ens33 ipv4.method manual ipv4.addresses 10.0.0.20/24 ipv4.gateway 10.0.0.2 ipv4.dns 10.0.0.2 autoconnect yes
[root@all-in-one ~]# nmcli connection up ens33
2 - 设置主机名及/etc/hosts文件做地址解析
[root@all-in-one ~]# cat /etc/hostname
all-in-one
[root@all-in-one ~]# cat /etc/hosts
127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4
::1 localhost localhost.localdomain localhost6 localhost6.localdomain6
10.0.0.20 all-in-one
3 - 同步时间
[root@all-in-one ~]# yum install chrony -y
[root@all-in-one ~]# systemctl enable chronyd
[root@all-in-one ~]# systemctl start chronyd
[root@all-in-one ~]# chronyc sources
210 Number of sources = 4
MS Name/IP address         Stratum Poll Reach LastRx Last sample               
===============================================================================
^* 0.centos.pool.ntp.org         2   6    17    20   -980us[-2039us] +/-   28ms
^? makaki.miuku.net              0   7     0     -     +0ns[   +0ns] +/-    0ns
^- de-user.deepinid.deepin.>     3   6   115    13    -30ms[  -30ms] +/-  145ms
^+ h199-182-204-197.ip4.unm>     2   6    17    20   +985us[  -73us] +/-   93ms
4 - 双网卡
ens33 10.0.0.20 负责openstack管理网络，这个网络要能上网，以便以后可以安装包
ens37 负责openstack外部网络，最好不配置ip地址，如果配置了，安装完后也就不能用了
#看一下网卡
[root@all-in-one ~]# nmcli connection show 
NAME   UUID                                  TYPE      DEVICE 
ens33  6fb9133f-b8ac-4cfd-9180-650c1ee33c85  ethernet  ens33  
ens37  3f220bb8-593b-338c-aa8a-271b6358fd2d  ethernet  ens37  
5 - 安装docker
[root@all-in-one ~]# yum install  python-devel libffi-devel gcc openssl-devel git python-pip -y
#
[root@all-in-one ~]# yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-selinux docker-engine-selinux docker-engine 
#
[root@all-in-one ~]#  sudo yum install  -y yum-utils device-mapper-persistent-data lvm2
6 - 装官方源
[root@all-in-one ~]# yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
​mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
7 - 安装
[root@all-in-one ~]# yum install docker-ce docker-ce-cli containerd.io -y
8 - 开启服务
[root@all-in-one ~]# systemctl enable docker.service
Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.
[root@all-in-one ~]# systemctl start docker.service 
[root@all-in-one ~]# systemctl status docker.service  | grep active
   Active: active (running) since 六 2020-05-23 10:53:57 CST; 8s ago
9 - 测试
[root@all-in-one ~]# docker run hello-world
Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
0e03bdcc26d7: Pull complete 
Digest: sha256:6a65f928fb91fcfbc963f7aa6d57c8eeb426ad9a20c7ee045538ef34847f44f1
Status: Downloaded newer image for hello-world:latest
Hello from Docker!
This message shows that your installation appears to be working correctly.
To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.
To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash
Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/
For more examples and ideas, visit:
 https://docs.docker.com/get-started/
10 - 下载加速器
sudo tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://7bc3o1s2.mirror.aliyuncs.com"]
}
EOF
[root@all-in-one docker]# sudo systemctl daemon-reload
[root@all-in-one docker]# sudo systemctl restart docker
查看已经有了加速器
[root@all-in-one docker]# docker info
Registry Mirrors:
  https://qvfrdgm3.mirror.aliyuncs.com/
11 - 确认PIP环境,升级PIP
[root@all-in-one docker]# pip install  -U pip  Successfully installed pip-20.1.1
12 - 安装Kolla-ansible
#可以从GITHUB上克隆 ：
[root@all-in-one ~]# git clone  https://github.com/openstack/kolla-ansible  -b stable/train
正克隆到 'kolla-ansible'...
remote: Enumerating objects: 109, done.
remote: Counting objects: 100% (109/109), done.
remote: Compressing objects: 100% (85/85), done.
remote: Total 107039 (delta 41), reused 64 (delta 21), pack-reused 106930
接收对象中: 100% (107039/107039), 19.87 MiB | 16.00 KiB/s, done.
处理 delta 中: 100% (70052/70052), done.
13 - 安装
[root@all-in-one ~]#  yum install  ansible  -y
[root@all-in-one ~]#  cd  kolla-ansible/
[root@all-in-one kolla-ansible]# sudo pip install  kolla-ansible --ignore-installed PyYAML
    Running setup.py install for backports.ssl-match-hostname ... done
    Running setup.py install for wrapt ... done
    Running setup.py install for PyYAML ... done
    Running setup.py install for kolla-ansible ... done
Successfully installed Babel-2.8.0 Jinja2-2.11.2 MarkupSafe-1.1.1 PyYAML-5.3.1 backports.ssl-match-hostname-3.7.0.1 certifi-2020.4.5.1 cffi-1.14.0 chardet-3.0.4 cryptography-2.9.2 debtcollector-1.22.0 docker-4.2.0 enum34-1.1.10 funcsigs-1.0.2 idna-2.9 ipaddress-1.0.23 iso8601-0.1.12 jmespath-0.10.0 kolla-ansible-9.1.0 monotonic-1.5 netaddr-0.7.19 netifaces-0.10.9 oslo.config-7.0.0 oslo.i18n-3.25.1 oslo.utils-3.42.1 pbr-5.4.5 pycparser-2.20 pyparsing-2.4.7 pytz-2020.1 requests-2.23.0 rfc3986-1.4.0 setuptools-44.1.0 six-1.15.0 stevedore-1.32.0 urllib3-1.25.9 websocket-client-0.57.0 wrapt-1.12.1
14 - 安装好后做环境配置
[root@all-in-one ~]# mkdir  /etc/kolla 
[root@all-in-one ~]# chown   root:root  /etc/kolla/
[root@all-in-one ~]# cp  -r  kolla-ansible/etc/kolla/*  /etc/kolla/
[root@all-in-one ~]# cp  kolla-ansible/ansible/inventory/* /home/
[root@all-in-one ~]# mkdir  /etc/kolla/config/nova -p
[root@all-in-one ~]# cd 
[root@all-in-one ~]# vim /etc/kolla/config/nova/nova-compute.conf
[root@all-in-one ~]# cat /etc/kolla/config/nova/nova-compute.conf
[libvirt]
virt_type=qemu
cpu_mode = none
[root@all-in-one ~]# vim /etc/ansible/ansible.cfg 
[defaults]
host_key_checking=False
pipelining=True
forks=100
[root@all-in-one ~]# kolla-genpwd
[root@all-in-one ~]# vim  /etc/kolla/passwords.yml
keystone_admin_password: Com.123  #不能全是数字哟（admin和dashboard的密码）
15 - 配置kolla-ansible
[root@all-in-one ~]# vim /etc/kolla/globals.yml
kolla_base_distro: "centos"
kolla_install_type: "source"
openstack_release: "train"
network_interface: "ens33"
neutron_external_interface: "ens37"
kolla_internal_vip_address: "10.0.0.250"
16 - 具有kolla的Bootstrap服务器部署依赖项：
[root@all-in-one ~]# kolla-ansible -i /home/all-in-one bootstrap-servers
17 - 对主机进行部署前检查：
[root@all-in-one ~]# kolla-ansible -i /home/all-in-one deploy
[root@all-in-one ~]# docker images
REPOSITORY                                  TAG                 IMAGE ID            CREATED             SIZE
kolla/centos-source-nova-compute            train               0bdab2688eeb        22 hours ago        1.88GB
kolla/centos-source-glance-api              train               135f7042305f        22 hours ago        948MB
kolla/centos-source-placement-api           train               139a50420850        22 hours ago        919MB
kolla/centos-source-keystone-fernet         train               c50864dfceb8        22 hours ago        918MB
kolla/centos-source-keystone-ssh            train               269c4112c01e        22 hours ago        919MB
kolla/centos-source-keystone                train               e3ad7577b29f        22 hours ago        917MB
kolla/centos-source-nova-api                train               c415c5a3f3db        22 hours ago        1.08GB
kolla/centos-source-nova-ssh                train               f01e201f9d94        22 hours ago        1.05GB
kolla/centos-source-nova-scheduler          train               b78728e692c1        22 hours ago        1.02GB
kolla/centos-source-nova-novncproxy         train               59ecb954703e        22 hours ago        1.05GB
kolla/centos-source-nova-conductor          train               23027b6e1e19        22 hours ago        1.02GB
kolla/centos-source-nova-libvirt            train               1fb6d6aaff2a        22 hours ago        1.25GB
kolla/centos-source-openvswitch-vswitchd    train               fde1bc3d305b        22 hours ago        425MB
kolla/centos-source-openvswitch-db-server   train               b9417142762a        22 hours ago        425MB
kolla/centos-source-kolla-toolbox           train               866d40bbd8a0        22 hours ago        842MB
kolla/centos-source-keepalived              train               4ae3e5b0eff3        22 hours ago        414MB
kolla/centos-source-fluentd                 train               4a412a485e0c        22 hours ago        697MB
kolla/centos-source-chrony                  train               a3efe07d5c8e        22 hours ago        408MB
kolla/centos-source-mariadb                 train               948f10edbd73        22 hours ago        593MB
kolla/centos-source-memcached               train               77d638b0c015        22 hours ago        408MB
kolla/centos-source-rabbitmq                train               faa1829cf94a        22 hours ago        487MB
kolla/centos-source-haproxy                 train               25c1e39ec513        22 hours ago        433MB
kolla/centos-source-cron                    train               8463d88f41e7        23 hours ago        408MB
#失败了，加速器被偷换掉了，但是不慌
18 - 先把加速器整回来
[root@all-in-one docker]# sudo tee /etc/docker/daemon.json <<-'EOF'
> {
>   "registry-mirrors": ["https://7bc3o1s2.mirror.aliyuncs.com"]
> }
> EOF
{
  "registry-mirrors": ["https://7bc3o1s2.mirror.aliyuncs.com"]
}
[root@all-in-one docker]# systemctl daemon-reload
[root@all-in-one docker]# systemctl restart docker
[root@all-in-one docker]# cat daemon.json 
{
  "registry-mirrors": ["https://7bc3o1s2.mirror.aliyuncs.com"]
}
19 - 拉取镜像
#拉镜像 启容器
[root@all-in-one ~]# kolla-ansible -i /home/all-in-one deploy
#总报红后换了这种拉取方式：
[root@all-in-one ~]# vim docker_openstack.sh
[root@all-in-one ~]# cat docker_openstack.sh 
#!/bin/bash
docker pull kolla/centos-source-fluentd:train
docker pull kolla/centos-source-horizon:train
docker pull kolla/centos-source-heat-api:train
docker pull kolla/centos-source-heat-api-cfn:train
docker pull kolla/centos-source-heat-engine:train
docker pull kolla/centos-source-neutron-server:train
docker pull kolla/centos-source-neutron-openvswitch-agent:train
docker pull kolla/centos-source-neutron-l3-agent:train
docker pull kolla/centos-source-neutron-metadata-agent:train
docker pull kolla/centos-source-neutron-dhcp-agent:train
docker pull kolla/centos-source-nova-api:train
docker pull kolla/centos-source-nova-ssh:train
docker pull kolla/centos-source-nova-scheduler:train
docker pull kolla/centos-source-nova-conductor:train
docker pull kolla/centos-source-nova-novncproxy:train
docker pull kolla/centos-source-nova-compute:train
docker pull kolla/centos-source-nova-libvirt:train
docker pull kolla/centos-source-glance-api:train
docker pull kolla/centos-source-placement-api:train
docker pull kolla/centos-source-keystone:train
docker pull kolla/centos-source-keystone-ssh:train
docker pull kolla/centos-source-keystone-fernet:train
docker pull kolla/centos-source-openvswitch-db-server:train
docker pull kolla/centos-source-openvswitch-vswitchd:train
docker pull kolla/centos-source-kolla-toolbox:train
docker pull kolla/centos-source-memcached:train
docker pull kolla/centos-source-chrony:train
docker pull kolla/centos-source-rabbitmq:train
docker pull kolla/centos-source-mariadb:train
docker pull kolla/centos-source-haproxy:train
docker pull kolla/centos-source-cron:train
docker pull kolla/centos-source-keepalived:train
[root@all-in-one ~]# . docker_openstack.sh 
#瞅一眼
[root@all-in-one ~]# docker images
REPOSITORY                                      TAG                 IMAGE ID            CREATED             SIZE
kolla/centos-source-horizon                     train               bda506186490        24 hours ago        1.03GB
kolla/centos-source-nova-compute                train               0bdab2688eeb        25 hours ago        1.88GB
kolla/centos-source-glance-api                  train               135f7042305f        25 hours ago        948MB
kolla/centos-source-placement-api               train               139a50420850        25 hours ago        919MB
kolla/centos-source-keystone-fernet             train               c50864dfceb8        25 hours ago        918MB
kolla/centos-source-keystone-ssh                train               269c4112c01e        25 hours ago        919MB
kolla/centos-source-keystone                    train               e3ad7577b29f        25 hours ago        917MB
kolla/centos-source-neutron-server              train               cf053326848c        25 hours ago        1.02GB
kolla/centos-source-neutron-l3-agent            train               f16213ac57b3        25 hours ago        1.03GB
kolla/centos-source-neutron-openvswitch-agent   train               341065ffd169        25 hours ago        997MB
kolla/centos-source-neutron-metadata-agent      train               db692452cc4e        25 hours ago        997MB
kolla/centos-source-neutron-dhcp-agent          train               7b056b895170        25 hours ago        997MB
kolla/centos-source-nova-api                    train               c415c5a3f3db        25 hours ago        1.08GB
kolla/centos-source-heat-api                    train               38a7f118449b        25 hours ago        911MB
kolla/centos-source-heat-api-cfn                train               14880f3c8280        25 hours ago        911MB
kolla/centos-source-heat-engine                 train               79629ce421fc        25 hours ago        911MB
kolla/centos-source-nova-ssh                    train               f01e201f9d94        25 hours ago        1.05GB
kolla/centos-source-nova-scheduler              train               b78728e692c1        25 hours ago        1.02GB
kolla/centos-source-nova-conductor              train               23027b6e1e19        25 hours ago        1.02GB
kolla/centos-source-nova-novncproxy             train               59ecb954703e        25 hours ago        1.05GB
kolla/centos-source-nova-libvirt                train               1fb6d6aaff2a        25 hours ago        1.25GB
kolla/centos-source-openvswitch-vswitchd        train               fde1bc3d305b        25 hours ago        425MB
kolla/centos-source-openvswitch-db-server       train               b9417142762a        25 hours ago        425MB
kolla/centos-source-kolla-toolbox               train               866d40bbd8a0        25 hours ago        842MB
kolla/centos-source-keepalived                  train               4ae3e5b0eff3        25 hours ago        414MB
kolla/centos-source-fluentd                     train               4a412a485e0c        25 hours ago        697MB
kolla/centos-source-chrony                      train               a3efe07d5c8e        25 hours ago        408MB
kolla/centos-source-mariadb                     train               948f10edbd73        25 hours ago        593MB
kolla/centos-source-memcached                   train               77d638b0c015        25 hours ago        408MB
kolla/centos-source-rabbitmq                    train               faa1829cf94a        25 hours ago        487MB
kolla/centos-source-haproxy                     train               25c1e39ec513        25 hours ago        433MB
kolla/centos-source-cron 
20 - 然后就可以安装Openstack客户端啦
pip install python-openstackclient
