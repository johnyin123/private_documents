# -*- coding: utf-8 -*-
import logging, datetime, os, utils, multiprocessing, json, random, config
from typing import Iterable, Optional, Set, List, Tuple, Union, Dict, Generator
logging.basicConfig(encoding='utf-8', format='[%(funcName)s@%(filename)s(%(lineno)d)]%(name)s %(levelname)s: %(message)s')
logger = logging.getLogger(__name__)
logger.setLevel(level=os.getenv('LOG', 'INFO').upper())

# DATA_DIR=/home/johnyin/disk/mygit/github_private/kvm/docker-kvm/test/work
# PREFIX=/home/johnyin/disk/mygit/github_private/kvm/docker-kvm/test/work
# for f in ${DATA_DIR}/*.json; do
#   etcdctl put ${PREFIX}/${f##*/} '$(cat ${f})'
# done

class etcd_task:
    cache = {
        os.path.join(config.DATA_DIR, 'hosts.json'):utils.manager.list(),
        os.path.join(config.DATA_DIR, 'devices.json'):utils.manager.list(),
        os.path.join(config.DATA_DIR, 'golds.json'):utils.manager.list(),
        os.path.join(config.DATA_DIR, 'iso.json'):utils.manager.list(),
    }
    lock = None

import etcd3
def cfg_updater(dic, prefix:str):
    etcd = etcd3.client(host='localhost', port=2379)
    for k, v in dic.items():
        value, meta = etcd.get(k)
        logger.info(f'Init {value} version={meta.version}')
        dic[k] = [utils.manager.dict(item) for item in json.loads(value)]
    #for value, meta in list(etcd.get_prefix(prefix, keys_only=True)):
    _iter, _cancel = etcd.watch_prefix(prefix)
    for event in _iter:
        # if stop_event_obj.is_set():
        #     logging.info("Watcher thread received stop signal. Exiting.")
        #     return
        try:
            if isinstance(event, etcd3.events.PutEvent):
                dic[event.key] = [utils.manager.dict(item) for item in json.loads(event.value)]
            elif isinstance(event, etcd3.events.DeleteEvent):
                dic[event.key] = {}
        except json.JSONDecodeError:
            logging.error(f'decode JSON from etcd event: {event}')

def node_process(key:str, val:str):
    etcd = etcd3.client(host='localhost', port=2379)
    try:
        with etcd.lock(f'lock-{key}', ttl=3) as lock:
            if lock.is_acquired():
                # compare=[etcd.transactions.value(KEY) == current_json_str],
                etcd.transaction(
                    compare=[],
                    success=[etcd.transactions.put(key, val)],
                    failure=[]
                )
                logger.info(f'Updated shared JSON: {key}')
            else:
                logger.info(f'Failed to acquire etcd lock, another node is writing. Retrying in a moment.')
    except Exception:
        logger.exception(f'etcd {key}')

import threading
threading.Thread(target=cfg_updater, args=(etcd_task.cache, config.DATA_DIR,), daemon=True).start()

import time
time.sleep(2)

demo_key=os.path.join(config.DATA_DIR, 'devices.json')
node_process(demo_key, '[{"key":"val"}]')

logger.info(f'Demo finished. {etcd_task.cache}')

