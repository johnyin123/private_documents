# -*- coding: utf-8 -*-
import logging, datetime, os, utils, multiprocessing, json, random, config
from typing import Iterable, Optional, Set, List, Tuple, Union, Dict, Generator
logger = logging.getLogger(__name__)

class JSONCacheBase:
    filename = None
    cache = None
    lock = None

    @classmethod
    def reload(cls):
        with cls.lock:
            cls.cache[:] = [utils.manager.dict(item) for item in json.loads(utils.load(cls.filename))]

    @classmethod
    def save(cls):
        with cls.lock:
            utils.save(cls.filename, json.dumps([dict(item) for item in cls.cache]))

    @classmethod
    def list_all(cls, **criteria) -> List[utils.FakeDB]:
        data = cls.cache
        for key, val in criteria.items():
            data = utils.search(data, key, val)
        return [utils.FakeDB(**dict(entry)) for entry in data]

    @classmethod
    def get_one(cls, **criteria) -> utils.FakeDB:
        data = cls.cache
        for key, val in criteria.items():
            data = utils.search(data, key, val)
        if len(data) == 1:
            return utils.FakeDB(**dict(data[0]))
        raise Exception(f"{cls.__name__} entry not found or not unique: {criteria}")

class KVMHost(JSONCacheBase):
    filename = os.path.join(config.DATA_DIR, 'hosts.json')
    cache = utils.manager.list()
    lock = multiprocessing.Lock()

class KVMDevice(JSONCacheBase):
    filename = os.path.join(config.DATA_DIR, 'devices.json')
    cache = utils.manager.list()
    lock = multiprocessing.Lock()

class KVMGold(JSONCacheBase):
    filename = os.path.join(config.DATA_DIR, 'golds.json')
    cache = utils.manager.list()
    lock = multiprocessing.Lock()

class KVMIso(JSONCacheBase):
    filename = os.path.join(config.DATA_DIR, 'iso.json')
    cache = utils.manager.list()
    lock = multiprocessing.Lock()

class KVMGuest(JSONCacheBase):
    filename = os.path.join(config.DATA_DIR, 'guests.json')
    cache = utils.manager.list()
    lock = multiprocessing.Lock()

    @classmethod
    def Upsert(cls, kvmhost: str, arch: str, records: List[Dict]) -> None:
        try:
            with cls.lock:
                utils.remove(cls.cache, 'kvmhost', kvmhost)
            for rec in records:
                with cls.lock:
                    cls.cache.append(utils.manager.dict({**{'kvmhost': kvmhost, 'arch': arch}, **rec}))
            cls.save()
        except Exception as e:
            logger.exception(f'Upsert failed for guest {kvmhost}: {e}')

class IPPool(JSONCacheBase):
    filename = os.path.join(config.DATA_DIR, 'ippool.json')
    cache = utils.manager.list()
    lock = multiprocessing.Lock()

    @classmethod
    def append(cls, cidr: str, gateway: str) -> None:
        if not cidr or not gateway:
            return
        with cls.lock:
            if not utils.search(cls.cache, 'cidr', cidr):
                cls.cache.append(utils.manager.dict(cidr=cidr, gateway=gateway))
        cls.save()

    @classmethod
    def remove(cls, cidr: str) -> None:
        try:
            with cls.lock:
                utils.remove(cls.cache, 'cidr', cidr)
            cls.save()
        except Exception as e:
            logger.exception(f'Failed to remove {cidr}: {e}')

    @classmethod
    def free_ip(cls) -> Dict:
        return random.choice(cls.cache)

def reload_all():
    for clz in [KVMHost,KVMDevice,KVMGold,KVMIso,KVMGuest,IPPool]:
        clz.reload()
