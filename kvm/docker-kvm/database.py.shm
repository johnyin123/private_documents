# -*- coding: utf-8 -*-
import datetime, os, utils, multiprocessing, json
from typing import Iterable, Optional, Set, List, Tuple, Union, Dict, Generator
from config import OUTDIR
from flask_app import logger

class FakeDB:
    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self, k, v)
    def _asdict(self):
        return self.__dict__

class KVMHost:
    filename = os.path.join(OUTDIR, 'hosts.json')
    cache = utils.manager.list()
    lock = multiprocessing.Lock()
    # { "name":"KVM主机名称", "url":"libvirt URI", "tpl":"domain模板XML文件", "arch":"cpu架构uname -m", "ipaddr":"ssh/vnc/spice,ip地址", "sshport":"ssh端口", # "desc":"主机描述"}

    @staticmethod
    def reload():
        utils.reload(KVMHost.lock, KVMHost.cache, KVMHost.filename)

    @staticmethod
    def getHostInfo(name):
        result = utils.search(KVMHost.cache, 'name', name)
        if len(result) == 1:
            return FakeDB(**result[0])
        raise Exception(f'host {name} nofound')

    @staticmethod
    def ListHost():
        return [ FakeDB(**element) for element in KVMHost.cache ]

class KVMDevice:
    filename = os.path.join(OUTDIR, 'devices.json')
    cache = utils.manager.list()
    lock = multiprocessing.Lock()
    #{"kvmhost":"KVM主机名称", "name":"device名称", "action":"device attach后执行的脚本", "devtype":"device类型", "tpl":"device模板XML文件", "desc":"device描述"}

    @staticmethod
    def reload():
        utils.reload(KVMDevice.lock, KVMDevice.cache, KVMDevice.filename)

    @staticmethod
    def getDeviceInfo(kvmhost, name):
        result = utils.search(KVMDevice.cache, 'name', name)
        result = utils.search(result, 'kvmhost', kvmhost)
        if len(result) == 1:
            return FakeDB(**result[0])
        raise Exception(f'device template {name} nofound')

    @staticmethod
    def ListDevice(kvmhost):
        result = utils.search(KVMDevice.cache, 'kvmhost', kvmhost)
        return [ FakeDB(**element) for element in result ]

class KVMGold:
    filename = os.path.join(OUTDIR, 'golds.json')
    cache = utils.manager.list()
    lock = multiprocessing.Lock()
    # {"name":"Gold盘名称", "arch":"Gold盘对应的CPU架构", "tpl":"Gold盘qcow2格式模板文件", "desc":"Gold盘描述"}

    @staticmethod
    def reload():
        utils.reload(KVMGold.lock, KVMGold.cache, KVMGold.filename)

    @staticmethod
    def getGoldInfo(name, arch):
        result = utils.search(KVMGold.cache, 'name', name)
        result = utils.search(result, 'arch', arch)
        if len(result) == 1:
            return FakeDB(**result[0])
        raise Exception(f'golddisk {name} nofound')

    @staticmethod
    def ListGold(arch):
        result = utils.search(KVMGold.cache, 'arch', arch)
        return [ FakeDB(**element) for element in result ]

class KVMGuest:
    filename = os.path.join(OUTDIR, 'guests.json')
    cache = utils.manager.list()
    lock = multiprocessing.Lock()
    # kvmhost, arch, uuid, desc, curcpu, curmem, mdconfig, maxcpu, maxmem, cputime, disks, net

    @staticmethod
    def reload():
        utils.reload(KVMGuest.lock, KVMGuest.cache, KVMGuest.filename)

    @staticmethod
    def Upsert(kvmhost:str, arch:str, records:List)->None:
        # can not modify records!!!!!
        try:
            with KVMGuest.lock:
                for rec in utils.search(KVMGuest.cache, 'kvmhost', kvmhost):
                    utils.remove(KVMGuest.cache, rec)
                for rec in records:
                    # # remove no use need key
                    guest = rec.copy()
                    guest.pop('state', "Not found")
                    utils.append(KVMGuest.cache, {**guest, 'kvmhost':kvmhost, 'arch':arch})
            utils.save(KVMGuest.filename, json.dumps([el.copy() for el in KVMGuest.cache]))
        except:
            logger.exception(f'Upsert db guest {kvmhost} in PID {os.getpid()} Failed')

    @staticmethod
    def ListGuest():
        logger.debug(f'ListGuest PID {os.getpid()}')
        return [ FakeDB(**element) for element in KVMGuest.cache ]
