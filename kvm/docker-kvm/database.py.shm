# -*- coding: utf-8 -*-
import datetime, os, utils, multiprocessing
from dbi import engine, Session, session, Base
from sqlalchemy import func,text,Column,String,Integer,Float,Date,DateTime,Enum,ForeignKey,JSON
from typing import Iterable, Optional, Set, List, Tuple, Union, Dict, Generator
from config import OUTDIR
from flask_app import logger

def cache_flush(lock, cache, dbtable):
    with lock:
        while(len(cache) > 0):
            cache.pop()
        logger.debug(f'update {dbtable} cache in PID {os.getpid()}')
        results = session.query(dbtable).all()
        for result in results:
            cache.append(utils.manager.dict(**result._asdict()))

class FakeDB:
    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self, k, v)
    def _asdict(self):
        return self.__dict__

class KVMHost:
    cache = utils.manager.list()
    lock = multiprocessing.Lock()
    # { "name":"KVM主机名称", "url":"libvirt URI", "tpl":"domain模板XML文件", "arch":"cpu架构uname -m", "ipaddr":"ssh/vnc/spice,ip地址", "sshport":"ssh端口", # "desc":"主机描述"}

    @staticmethod
    def reload():
        utils.reload(KVMHost.lock, KVMHost.cache, os.path.join(OUTDIR, 'hosts.json'))

    @staticmethod
    def getHostInfo(name):
        result = utils.search(KVMHost.cache, 'name', name)
        if len(result) == 1:
            return FakeDB(**result[0])
        raise Exception(f'host {name} nofound')

    @staticmethod
    def ListHost():
        return [ FakeDB(**element) for element in KVMHost.cache ]

class KVMDevice:
    cache = utils.manager.list()
    lock = multiprocessing.Lock()
    #{"kvmhost":"KVM主机名称", "name":"device名称", "action":"device attach后执行的脚本", "devtype":"device类型", "tpl":"device模板XML文件", "desc":"device描述"}

    @staticmethod
    def reload():
        utils.reload(KVMDevice.lock, KVMDevice.cache, os.path.join(OUTDIR, 'devices.json'))

    @staticmethod
    def getDeviceInfo(kvmhost, name):
        result = utils.search(KVMDevice.cache, 'name', name)
        result = utils.search(result, 'kvmhost', kvmhost)
        if len(result) == 1:
            return FakeDB(**result[0])
        raise Exception(f'device template {name} nofound')

    @staticmethod
    def ListDevice(kvmhost):
        result = utils.search(KVMDevice.cache, 'kvmhost', kvmhost)
        return [ FakeDB(**element) for element in result ]

class KVMGold:
    cache = utils.manager.list()
    lock = multiprocessing.Lock()
    # {"name":"Gold盘名称", "arch":"Gold盘对应的CPU架构", "tpl":"Gold盘qcow2格式模板文件", "desc":"Gold盘描述"}

    @staticmethod
    def reload():
        utils.reload(KVMGold.lock, KVMGold.cache, os.path.join(OUTDIR, 'golds.json'))

    @staticmethod
    def getGoldInfo(name, arch):
        result = utils.search(KVMGold.cache, 'name', name)
        result = utils.search(result, 'arch', arch)
        if len(result) == 1:
            return FakeDB(**result[0])
        raise Exception(f'golddisk {name} nofound')

    @staticmethod
    def ListGold(arch):
        result = utils.search(KVMGold.cache, 'arch', arch)
        return [ FakeDB(**element) for element in result ]

class KVMGuest(Base):
    __tablename__ = "kvmguest"
    kvmhost = Column(String(19),nullable=False,index=True,primary_key=True)
    arch = Column(String(8),nullable=False)
    uuid = Column(String,nullable=False,index=True,unique=True,primary_key=True)
    desc = Column(String,nullable=False)
    curcpu = Column(Integer,nullable=False,server_default='0')
    curmem = Column(Integer,nullable=False,server_default='0')
    mdconfig = Column(JSON,nullable=False)
    maxcpu = Column(Integer,nullable=False,server_default='0')
    maxmem = Column(Integer,nullable=False,server_default='0')
    cputime = Column(Integer,nullable=False,server_default='0')
    # state = Column(String)
    disks = Column(JSON,nullable=False)
    nets = Column(JSON,nullable=False)
    ####################################
    cache = utils.manager.list()
    lock = multiprocessing.Lock()
    @staticmethod
    def reload():
        cache_flush(KVMGuest.lock, KVMGuest.cache, KVMGuest)

    @staticmethod
    def Upsert(kvmhost:str, arch:str, records:List)->None:
        # can not modify records!!!!!
        try:
            session.query(KVMGuest).filter_by(kvmhost=kvmhost).delete()
            for rec in records:
                # # remove no use need key
                guest = rec.copy()
                guest.pop('state', "Not found")
                session.add(KVMGuest(**guest, kvmhost=kvmhost, arch=arch))
            session.commit()
            KVMGuest.reload()
        except:
            logger.exception(f'Upsert db guest {kvmhost} in PID {os.getpid()} Failed')
            session.rollback()

    @staticmethod
    def ListGuest():
        logger.debug(f'ListGuest PID {os.getpid()}')
        return [ FakeDB(**element) for element in KVMGuest.cache ]
        # return session.query(KVMGuest).all()
