# -*- coding: utf-8 -*-
import logging, datetime, os, utils, multiprocessing, json, random, config
from typing import Iterable, Optional, Set, List, Tuple, Union, Dict, Generator
logger = logging.getLogger(__name__)

class SHM_KVMGuest(utils.ShmListStore):
    def Upsert(self, kvmhost: str, arch: str, records: List[Dict]) -> None:
        self.delete(kvmhost=kvmhost)
        for rec in records:
            self.insert(kvmhost=kvmhost, arch=arch, **rec)

class SHM_KVMVar(utils.ShmListStore):
    def get_desc(self, var) -> str:
        try:
            return self.get_one(var=var).desc
        except:
            return 'n/a'

KVMHost   = utils.ShmListStore()
KVMDevice = utils.ShmListStore()
KVMGold   = utils.ShmListStore()
KVMIso    = utils.ShmListStore()
KVMVar    = SHM_KVMVar()
KVMGuest  = SHM_KVMGuest()

def reload_all() -> None:
    cfg_class={
        os.path.join(config.DATA_DIR, 'hosts.json')  :KVMHost,
        os.path.join(config.DATA_DIR, 'devices.json'):KVMDevice,
        os.path.join(config.DATA_DIR, 'golds.json')  :KVMGold,
        os.path.join(config.DATA_DIR, 'iso.json')    :KVMIso,
        os.path.join(config.DATA_DIR, 'vars.json')   :KVMVar,
    }
    def updater_cb(fname:str, content) -> None:
        if content:
            logger.info(f'Update {fname} from etcd')
            utils.file_save(fname, content)
            if cfg_class.get(fname):
                cfg_class.get(fname).reload(json.loads(content.decode('utf-8')))
        else:
            logger.info(f'Delete {fname} from etcd')
            os.remove(fname)

    if config.ETCD_PREFIX:
        utils.EtcdConfig.cfg_initupdate(updater_cb)
    for key, clz in cfg_class.items():
        if os.path.exists(key):
            clz.reload(json.loads(utils.file_load(key)))
