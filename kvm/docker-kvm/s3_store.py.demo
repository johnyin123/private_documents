import boto3

class S3StringHandler:
    def __init__(self, bucket_name, secret_key, access_key, url):
        self.bucket_name = bucket_name
        self.s3_client = boto3.client('s3', aws_secret_access_key = secret_key, aws_access_key_id = access_key, url = s3_host)
        # region_name=region_name)

    def write_string_to_s3(self, key, content):
        try:
            self.s3_client.put_object(Bucket=self.bucket_name, Key=key, Body=content.encode('utf-8'))
        except Exception as e:
            print(f"Error writing string to S3: {e}")

    def read_string_from_s3(self, key):
        try:
            obj = self.s3_client.get_object(Bucket=self.bucket_name, Key=key)
            # s3_client.download_file(bucket_name, key, local_path)
            content = obj['Body'].read().decode('utf-8')
            return content
        except Exception as e:
            print(f"Error reading string from S3: {e}")
            return None

    def delete_s3_object(self, key):
        try:
            self.s3_client.delete_object(Bucket=self.bucket_name, Key=key)
        except Exception as e:
            print(f"Error deleting S3 object: {e}")

###########################################################
import etcd3
etcd = etcd3.client()
file_path = "my_document.txt"
etcd_key = "/files/my_document"


try:
    with open(file_path, "rb") as f:
        file_content = f.read()
    etcd.put(etcd_key, file_content)
    print(f"File '{file_path}' content stored in etcd at key '{etcd_key}'")
except Exception as e:
    print(f"An error occurred: {e}")

try:
    value, metadata = etcd.get(etcd_key)
    if value is not None:
        with open(file_path, "wb") as f:
            f.write(value)
    else:
        print(f"No content found for key '{etcd_key}' in etcd.")
except Exception as e:
    print(f"An error occurred: {e}")
