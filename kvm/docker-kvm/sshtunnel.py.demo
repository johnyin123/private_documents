# -*- coding: utf-8 -*-
import flask_app, os, json
from config import config
logger=flask_app.logger

import functools
import queue
import signal
import socket
import threading

class _Tunnel(object):
    def __init__(self):
        self._pid = None
        self._closed = False
        self._errfd = None

    def close(self):
        if self._closed:
            return
        self._closed = True
        logger.info("Close tunnel PID=%s ERRFD=%s", self._pid, self._errfd and self._errfd.fileno() or None)
        self._errfd = None
        if self._pid:
            os.kill(self._pid, signal.SIGKILL)
            os.waitpid(self._pid, 0)
        self._pid = None

    def get_err_output(self):
        errout = ""
        while True:
            try:
                new = self._errfd.recv(1024)
            except Exception:
                break
            if not new:
                break
            errout += new.decode()
        return errout

    def open(self, argv, sshfd):
        if self._closed:
            return
        errfds = socket.socketpair()
        pid = os.fork()
        if pid == 0:
            errfds[0].close()
            os.dup2(sshfd.fileno(), 0)
            os.dup2(sshfd.fileno(), 1)
            os.dup2(errfds[1].fileno(), 2)
            os.execlp(*argv)
            os._exit(1)
        sshfd.close()
        errfds[1].close()
        self._errfd = errfds[0]
        self._errfd.setblocking(0)
        logger.info("Opened tunnel PID=%d ERRFD=%d", pid, self._errfd.fileno())
        self._pid = pid

def _make_ssh_command(connhost, connuser, connport, gaddr, gport, gsocket):
    argv = ["ssh", "ssh"]
    if connport:
        argv += ["-p", str(connport)]
    if connuser:
        argv += ["-l", connuser]
    argv += [connhost]
    # Build 'nc' command run on the remote host
    if gsocket:
        nc_params = "-U %s" % gsocket
    else:
        nc_params = "%s %s" % (gaddr, gport)
    nc_cmd = (
        """nc -q 2>&1 | grep "requires an argument" >/dev/null;"""
        """if [ $? -eq 0 ] ; then"""
        """   CMD="nc -q 0 %(nc_params)s";"""
        """else"""
        """   CMD="nc %(nc_params)s";"""
        """fi;"""
        """eval "$CMD";""" % {"nc_params": nc_params}
    )
    argv.append("sh -c")
    argv.append("'%s'" % nc_cmd)
    argv_str = functools.reduce(lambda x, y: x + " " + y, argv[1:])
    logger.info("Pre-generated ssh command for info: %s", argv_str)
    return argv

class SSHTunnels(object):
    def __init__(self, connhost, connuser, connport, gaddr, gport, gsocket):
        self._tunnels = []
        self._sshcommand = _make_ssh_command(
            connhost, connuser, connport, gaddr, gport, gsocket
        )
        self._locked = False

    def open_new(self):
        t = _Tunnel()
        self._tunnels.append(t)
        # socket FDs are closed when the object is garbage collected. This
        # can close an FD behind spice/vnc's back which causes crashes.
        #
        # Dup a bare FD for the viewer side of things, but keep the high
        # level socket object for the SSH side, since it simplifies things
        # in that area.
        viewerfd, sshfd = socket.socketpair()
        _tunnel_scheduler.schedule(self._lock, t.open, self._sshcommand, sshfd)

        retfd = os.dup(viewerfd.fileno())
        logger.info("Generated tunnel fd=%s for viewer", retfd)
        return retfd

    def close_all(self):
        for l in self._tunnels:
            l.close()
        self._tunnels = []
        self.unlock()

    def get_err_output(self):
        errstrings = []
        for l in self._tunnels:
            e = l.get_err_output().strip()
            if e and e not in errstrings:
                errstrings.append(e)
        return "\n".join(errstrings)


############################################################
import shutil
SOCAT_COMMAND = shutil.which('socat')

PARSER = argparse.ArgumentParser(description="Forward unix sockets over SSH")
PARSER.add_argument("--local_path", help="override the local path. If not given, mirrors the remote_path")
PARSER.add_argument("--local_user", help="try to set the user the local socket is owned by")
PARSER.add_argument("--local_group", help="try to set the group the local socket is owned by")
PARSER.add_argument("--local_mode", help="try to set the file mode of the local socket")
PARSER.add_argument("ssh_command", help="command to connect to the remote host. Example: ssh myuser@myhost")
PARSER.add_argument("remote_path", help="path to the remote socket to forward")

def main():
    args = PARSER.parse_args()
    logging.debug(args)

    socat_local_opts = []
    for opt_name in ('user', 'group', 'mode'):
        opt_val = getattr(args, 'local_%s' % opt_name)
        if opt_val:
            socat_local_opts.append('%s=%s' % (opt_name, opt_val))

    socat_local_opts_suffix = ''.join((
        ',%s' % opt_string for opt_string in socat_local_opts
    ))

    real_socat_command = (SOCAT_COMMAND,
                         'UNIX-LISTEN:{local_path},reuseaddr,fork%s' % socat_local_opts_suffix,
                         'EXEC:{ssh_command} socat STDIO UNIX-CONNECT\\:{remote_path}',
                         )
    remote_path = args.remote_path
    local_path = args.local_path or remote_path
    real_socat_command = [
        s.format(
            local_path=local_path,
            remote_path=remote_path,
            ssh_command=args.ssh_command,
        )
        for s in real_socat_command]
    logging.debug("Real socat command: %s", real_socat_command)

    logging.info("Spawning the socat process")
    os.execvp(real_socat_command[0], real_socat_command)


# # no use fork,reuseaddr!
local = 'UNIX-LISTEN:/tmp/unix-sock'
remote = 'TCP:localhost:9999'
ssh_cmd = f'ssh -p60022 root@192.168.168.1 socat STDIO {remote}'
socat_cmd = ('socat', f'{local},unlink-early', f'EXEC:"{ssh_cmd}"',)
pid = os.fork()
if pid == 0:
    os.execvp(socat_cmd[0], socat_cmd)
logger.info("Opened tunnel PID=%d, %s", pid, socat_cmd)

# import signal
# os.kill(pid, signal.SIGKILL)
os.waitpid(pid, 0)

    @vcpus.setter
    def vcpus(self, value=1):
        self.dom.setVcpusFlags(value, libvirt.VIR_DOMAIN_AFFECT_CONFIG)

    @memory.setter
    def memory(self, value):
        if value < 256:
            logger.warning(f"low memory: {value}MB for VM {self.uuid}")
        value *= 1024
        self.dom.setMemoryFlags(
            value, libvirt.VIR_DOMAIN_AFFECT_CONFIG | libvirt.VIR_DOMAIN_MEM_MAXIMUM
        )
        self.dom.setMemoryFlags(value, libvirt.VIR_DOMAIN_AFFECT_CONFIG)

def _print_json(result: typing.Any, output: typing.IO[str] = sys.stdout, pretty: bool = False) -> None:
    indent = 2 if pretty else None
    separators = (",", ": ") if pretty else (",", ":")
    json.dump(result, output, indent=indent, separators=separators, sort_keys=True)

import json
import libvirt_qemu
res = libvirt_qemu.qemuMonitorCommand(domain,
    json.dumps({'execute': 'query-block'},),
    libvirt_qemu.VIR_DOMAIN_QEMU_MONITOR_COMMAND_DEFAULT,
    )
res = json.loads(res)
if 'error' in res:
    raise exc.DownburstError('Cannot query QEmu for block device state', res['error'].get('desc'),)
cdroms = [dev for dev in res['return'] if 'tray_open' in dev]
if not cdroms:
    raise exc.DownburstError('VM must have at least one CD-ROM to check tray status', res['error'].get('desc'),)
for dev in cdroms:
    .......

import json
import logging
import sys
import time
from base64 import b64decode, b64encode
from collections.abc import Sequence
from datetime import datetime, timedelta
from typing import TypedDict

import libvirt
import libvirt_qemu
from libvirt import virConnect, virDomain

from virtomate.error import NotFoundError, IllegalStateError

logger = logging.getLogger(__name__)


def ping_guest(conn: virConnect, domain_name: str, wait: float = 0) -> bool:
    """Ping the QEMU Guest Agent of a domain. Return ``True`` if the QEMU Guest Agent responded, ``False`` otherwise.

    Args:
        conn: libvirt connection
        domain_name: Name of the domain to ping
        wait: For how many seconds to wait for the QEMU Guest Agent to respond

    Returns:
        ``True`` if the QEMU Guest Agent responded, ``False`` otherwise.

    Raises:
        virtomate.error.NotFoundError: if the domain does not exist
    """
    # Convert the potential libvirt error in one of virtomate's exceptions because the domain lookup doubles as argument
    # validation which is virtomate's responsibility.
    try:
        domain = conn.lookupByName(domain_name)
    except libvirt.libvirtError as ex:
        raise NotFoundError(f"Domain '{domain_name}' does not exist") from ex

    cmd = {"execute": "guest-ping"}
    json_cmd = json.dumps(cmd)

    attempt = 0
    end = datetime.now() + timedelta(seconds=wait)
    while True:  # We want to send at least one ping and Python has no do...while.
        attempt += 1
        try:
            libvirt_qemu.qemuAgentCommand(domain, json_cmd, 30, 0)
            logger.debug("Attempt %d to ping %s succeeded", attempt, domain_name)
            return True
        except libvirt.libvirtError as ex:
            logger.debug(
                "Attempt %d to ping %s failed", attempt, domain_name, exc_info=ex
            )
            time.sleep(0.5)

        if datetime.now() >= end:
            return False


_GuestExecStatus = TypedDict(
    "_GuestExecStatus",
    {
        "exited": bool,
        "exitcode": int,
        "signal": int,
        "out-data": str,
        "err-data": str,
        "out-truncated": bool,
        "err-truncated": bool,
    },
    total=False,
)


class RunResult(TypedDict):
    exit_code: int | None
    """Exit code of the program if it was terminated normally."""
    signal: int | None
    """Signal number (Unix-like operating systems) or unhandled exception code (Windows) if the program was terminated
    abnormally."""
    stdout: str | None
    """Captured standard output of the program."""
    stderr: str | None
    """Captured standard error of the program."""
    stdout_truncated: bool
    """Whether standard output was truncated."""
    stderr_truncated: bool
    """Whether standard error was truncated."""

def run_in_guest(
    conn: virConnect,
    domain_name: str,
    program: str,
    arguments: Sequence[str],
    encode: bool = False,
    stdin: bytes | None = None,
) -> RunResult:
    """Run ``program`` with its ``arguments`` on the guest identified by ``domain_name``, optionally passing  ``stdin``
    as standard input to ``program``. The program's exit code, standard output and standard error and any potentially
    received signal will be returned once the program has exited. QEMU Guest Agent needs to installed and running on the
    guest for this function to work. If QEMU Guest Agent is not installed or running, :py:class:`libvirt.libvirtError`
    will be raised.

    ``program`` will be run directly using an ``exec()``-like function without the involvement of any shell or command
    prompt.

    Due to limitations of libvirt and QEMU Guest Agent, standard input, output, and error are limited in size to a few
    megabytes. Furthermore, standard input is fully buffered due to way QEMU Guest Agent operates.

    Args:
        conn: libvirt connection
        domain_name: Name of the domain
        program: Name or path of the program to run on the guest. ``program`` must be on ``PATH`` if only the name of
            ``program`` is given.
        arguments: Arguments to be passed to ``program``
        encode: Whether standard output and standard error should be encoded with Base64
        stdin: Optional standard input to be passed to ``program``

    Returns:
        Results of the program execution

    Raises:
        virtomate.error.NotFoundError: if the domain does not exist
        virtomate.error.IllegalStateError: if the domain is not running
        libvirt.libvirtError: if any libvirt operation fails
    """
    try:
        domain = conn.lookupByName(domain_name)
    except libvirt.libvirtError as ex:
        raise NotFoundError(f"Domain '{domain_name}' does not exist") from ex

    # Validate state instead of using domain_in_state to save a lookup.
    (domain_state, _) = domain.state(0)
    if domain_state != libvirt.VIR_DOMAIN_RUNNING:
        raise IllegalStateError(f"Domain '{domain_name}' is not running")

    pid = _guest_exec(domain, program, arguments, stdin=stdin)
    result = _wait_for_guest_exec(domain, pid)

    # For JSON structure, see https://qemu-project.gitlab.io/qemu/interop/qemu-ga-ref.html#qapidoc-194
    exit_code = result["exitcode"] if "exitcode" in result else None
    signal = result["signal"] if "signal" in result else None

    stdout = None
    if "out-data" in result:
        if encode:
            stdout = result["out-data"]
        else:
            stdout = b64decode(result["out-data"]).decode("utf-8")

    stderr = None
    if "err-data" in result:
        if encode:
            stderr = result["err-data"]
        else:
            stderr = b64decode(result["err-data"]).decode("utf-8")

    # According to https://gitlab.com/qemu-project/qemu/-/blob/master/qga/commands.c#L23, the maximum output size is 16
    # MB. But libvirt already refuses to process responses that are much smaller (around 4 MB unencoded) and raises an
    # error. Hence, we never get into the situation that output is truncated. But libvirt might change its mind and
    # start accepting much larger messages. Hence, it seems sensible to leave it in.
    stdout_truncated = False
    if "out-truncated" in result:
        stdout_truncated = result["out-truncated"]

    stderr_truncated = False
    if "err-truncated" in result:
        stderr_truncated = result["err-truncated"]

    return {
        "exit_code": exit_code,
        "signal": signal,
        "stdout": stdout,
        "stderr": stderr,
        "stdout_truncated": stdout_truncated,
        "stderr_truncated": stderr_truncated,
    }


def _guest_exec(
    domain: virDomain,
    program: str,
    arguments: Sequence[str],
    stdin: bytes | None = None,
) -> int:
    # For JSON structure, see https://qemu-project.gitlab.io/qemu/interop/qemu-ga-ref.html#qapidoc-211
    cmd_args = {"path": program, "arg": arguments, "capture-output": True}
    if stdin is not None:
        cmd_args["input-data"] = b64encode(stdin).decode("ascii")

    cmd = {"execute": "guest-exec", "arguments": cmd_args}
    cmd_json = json.dumps(cmd)

    logger.debug("Sending QMP command to %s: %s", domain.name(), cmd_json)

    result_json = libvirt_qemu.qemuAgentCommand(
        domain, cmd_json, libvirt_qemu.VIR_DOMAIN_QEMU_AGENT_COMMAND_DEFAULT, 0
    )

    logger.debug("QMP response received from %s: %s", domain.name(), result_json)

    result = json.loads(result_json)
    # For JSON structure, see https://qemu-project.gitlab.io/qemu/interop/qemu-ga-ref.html#qapidoc-201
    pid = result["return"]["pid"]
    assert isinstance(pid, int), "PID is not a number"
    return pid


def _wait_for_guest_exec(
    domain: virDomain, pid: int, timeout: int = sys.maxsize
) -> _GuestExecStatus:
    start = time.monotonic()
    while True:
        if (time.monotonic() - start) > timeout:
            raise TimeoutError(f"Agent command did not complete in {timeout} seconds")

        cmd = {"execute": "guest-exec-status", "arguments": {"pid": pid}}
        cmd_json = json.dumps(cmd)

        logger.debug("Sending QMP command to %s: %s", domain.name(), cmd_json)

        result_json = libvirt_qemu.qemuAgentCommand(
            domain, cmd_json, libvirt_qemu.VIR_DOMAIN_QEMU_AGENT_COMMAND_DEFAULT, 0
        )

        logger.debug("QMP response received from %s: %s", domain.name(), result_json)

        result: _GuestExecStatus = json.loads(result_json)["return"]
        if not result["exited"]:
            logger.debug("Command has not finished yet, trying again")
            continue

        return result

def stream_callback(stream: libvirt.virStream, events: int, other: libvirt.virStream) -> None:
    try:
        got = other.recv(1024)
        os.write(0, got)
    except Exception:
        logger.exception('')
        return

#     readbuf = os.read(fd, 1024)
#     stream.send(readbuf)
with connect('qemu+tls://192.168.168.1/system') as conn:
    dom = conn.lookupByUUIDString('6f5d8bf6-d580-4946-9541-13fa98b4acf4')
    stream = conn.newStream(libvirt.VIR_STREAM_NONBLOCK)
    dom.openConsole(None, stream, 0)
    stream.eventAddCallback(libvirt.VIR_STREAM_EVENT_READABLE, stream_callback, stream)
while True:
    libvirt.virEventRunDefaultImpl()



class MyApp(object):
    @staticmethod
    def create():
        myapp=MyApp()
        web=flask_app.create_app({}, json=True)
        web.errorhandler(APIException)(APIException.handle)
        web.config['JSON_SORT_KEYS'] = False
        web.add_url_rule('/ssh', view_func=myapp.ssh, methods=['GET'])
        web.add_url_rule('/scp', view_func=myapp.scp, methods=['GET'])
        return web

    def ssh(self):
        host = "192.168.168.1"
        port = 60022
        username = "root"
        password = ""
        cmd = "cat /etc/*release*;ping -c 4 127.0.0.1;"
        return flask.Response(device.ssh_exec(host,port,username,password,cmd), mimetype="text/event-stream")

    def scp(self):
        host = "192.168.168.1"
        port = 60022
        username = "root"
        password = ""
        remote_path='/home/johnyin/disk/myvm/deepseek.qcow2'
        local_path='./test.docker'
        return flask.Response(device.sftp_get(host, port, username, password, remote_path, local_path), mimetype="text/event-stream")

import  paramiko
def ssh_exec(host,port,username,password,cmd):
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.load_system_host_keys()
        ssh.connect(hostname=host, port=port, username=username, password=password)
        logger.info(f'ssh {username}@{host}:{port}')
        stdin, stdout, stderr = ssh.exec_command(cmd)
        stdin.close()
        for line in stdout:
            yield line
        yield return_ok(f'ssh exec ok')
    except Exception as e:
        logger.exception(f'{host}:{port}')
        yield return_err(998, 'ssh', f'{e}')
    finally:
        ssh.close()

def sftp_get(host, port, username, password, remote_path, local_path):
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.load_system_host_keys()
        ssh.connect(hostname=host, port=port, username=username, password=password)
        sftp = ssh.open_sftp()
        logger.info(f'sftp {username}@{host}:{port} R:{remote_path} L:{local_path}')
        def progress_callback(sent, total):
            logger.info(f"data: {sent} {total}")
        sftp.get(remote_path, local_path, callback=progress_callback)
        # sftp.put(local_path, remote_path)
        yield return_ok(f'sftp get/put ok')
    except Exception as e:
        logger.exception(f'{host}:{port}')
        yield return_err(998, 'ssh', f'{e}')
    finally:
        sftp.close()
        ssh.close()

    app.add_url_rule('/domain/<string:operation>/<string:action>/<string:uuid>', view_func=self.upload_xml, methods=['POST'])
    def upload_xml(self, operation, action, uuid):
        # qemu hooks upload xml
        userip=flask.request.environ.get('HTTP_X_FORWARDED_FOR', flask.request.remote_addr)
        tls_dn=flask.request.environ.get('HTTP_X_CERT_DN', 'unknow_cert_dn')
        origin=flask.request.environ.get('HTTP_ORIGIN', '')
        logger.info("%s %s:%s, report vm: %s, operation: %s, action: %s", origin, userip, tls_dn, uuid, operation, action)
        if 'file' not in flask.request.files:
            return return_ok(f'{uuid} ok', report=f'{uuid}-{operation}-{action}')
        file = flask.request.files['file']
        domxml = file.read().decode('utf-8')
        with open(os.path.join(config.ISO_DIR, f"{uuid}.xml"), 'w') as f:
            f.write(domxml)
        return return_ok(f'{uuid} uploadxml ok')

import subprocess
def virsh(url, *args):
    '''
    out = virsh('qemu+tls://192.168.168.1/system', 'define', file)
    logger.info(out.decode("utf-8"))
    '''
    cmd = ("virsh", "-c", url, *args)
    logging.debug(f'Running virsh command: {cmd}')
    return subprocess.check_output(cmd)

from urllib.parse import urlparse
def split_url(url):
    parsed_url = urlparse(url)
    netloc = parsed_url.netloc
    if ":" in netloc:
        netloc = netloc.split(":")[0]
    port = parsed_url.port
    if port is None:
        port = 80 if parsed_url.scheme == 'http' else 443
    return parsed_url.scheme, netloc, port, parsed_url.path


def AgentCommand(self,guest,cmd,timeout=3,flag=0):
    try:
        return json.loads(libvirt_qemu.qemuAgentCommand(guest, cmd, timeout, flag))['return']
    except Exception:
        return {}

def getBootTime(self,guest):
    cmd = '{"execute": "guest-exec","arguments":{"path":"/bin/cat","arg":["/proc/uptime"],"capture-output":true}}'
    data = AgentCommand(guest,cmd)
    pid = data['pid']
    time.sleep(2)
    cmd = '{"execute": "guest-exec-status","arguments":{"pid":%s}}' % pid
    data = AgentCommand(guest,cmd) # exitcode:0,out-data:Base64Encode,exited:true
    result = base64.b64decode(data['out-data'])
    uptime = result.split(' ')
    return int(time.time()-float(uptime[0]))


    def screenshotHandler(self,stream, buf, fd):
        os.write(fd, buf)

    def screenshot(self,name,filename='screenshot.pbm'):
        domain = self.getGuest(name)
        stream = self.conn.newStream(0)
        mimetype = domain.screenshot(stream, 0, 0)
        #print "MIME Type:", mimetype ### image/x-portable-pixmap
        fd = os.open(filename, os.O_WRONLY | os.O_TRUNC | os.O_CREAT, 0644)
        stream.recvAll(self.screenshotHandler, fd)

xml = """<cpu mode="custom" match="exact">
    <model fallback="forbid">kvm64</model>
</cpu>"""
ret = conn.compareCPU(xml)
if ret == libvirt.VIR_CPU_COMPARE_ERROR:
    print("CPUs are not the same or ther was error.")
elif ret == libvirt.VIR_CPU_COMPARE_INCOMPATIBLE:
    print("CPUs are incompatible.")
elif ret == libvirt.VIR_CPU_COMPARE_IDENTICAL:
    print("CPUs are identical.")
elif ret == libvirt.VIR_CPU_COMPARE_SUPERSET:
    print("The host CPU is better than the one specified.")
else:
    print("An Unknown return code was emitted.")

# # migrate
conn = libvirt.open("qemu:///system")
dest_conn = libvirt.open("qemu+ssh://user@ipsystem")
dom = conn.lookupByName(domName)
prev_time = dom.getCPUStats(True)[0]['cpu_time']
new_dom = dom.migrate(dest_conn, libvirt.VIR_MIGRATE_LIVE | libvirt.VIR_MIGRATE_PERSIST_DEST, None, None, 0)
dest_conn.close()
conn.close()

def change_media(dev:str, isofile:str, bus:str, protocol:str, srv_addr:str, srv_port:int)->str:
    disk = xml.dom.minidom.parseString('''<disk type='network' device='cdrom'><driver name='qemu' type='raw'/><source><host/><ssl verify="no"/></source><target/><readonly/></disk>''')
    for it in disk.getElementsByTagName('source'):
        it.setAttribute('protocol', protocol)
        it.setAttribute('name', isofile)
    for it in disk.getElementsByTagName('host'):
        it.setAttribute('name', srv_addr)
        it.setAttribute('port', f'{srv_port}')
    for it in disk.getElementsByTagName('target'):
        it.setAttribute('dev', dev)
        it.setAttribute('bus', bus)
    return disk.toxml()

import ssl
from urllib.request import urlopen
def read_from_url(url:str)->str:
    try:
        unverified_context = ssl._create_unverified_context()
        with urlopen(url, context=unverified_context) as response:
            return response.read().decode('utf-8')
    except:
        logger.exception('read_from_url')
        return None
# http_url = "file:///home/johnyin/a.json"
# http_url = "https://vmm.registry.local/tpl/host/"

class Snapshot:

    def __init__(self, dom, disks, progress=True):
        self.dom = dom
        self.disks = disks
        self.progress = progress
        self.snapshotted = False
        self._do_snapshot()

    def _do_snapshot(self):
        snapshot_flags = libvirt.VIR_DOMAIN_SNAPSHOT_CREATE_NO_METADATA \
            | libvirt.VIR_DOMAIN_SNAPSHOT_CREATE_ATOMIC \
            | libvirt.VIR_DOMAIN_SNAPSHOT_CREATE_DISK_ONLY
        libvirt.ignored_errors = [
            libvirt.VIR_ERR_OPERATION_INVALID,
            libvirt.VIR_ERR_ARGUMENT_UNSUPPORTED
        ]
        try:
            self.dom.fsFreeze()
            guest_agent_installed = True
        except libvirt.libvirtError:
            guest_agent_installed = False
        libvirt.ignored_errors = []
        try:
            snapshot_xml = self.generate_snapshot_xml()
            self.dom.snapshotCreateXML(snapshot_xml, snapshot_flags)
        except libvirt.libvirtError:
            print("Failed to create domain snapshot", file=sys.stderr)
            sys.exit(1)
        finally:
            if guest_agent_installed:
                self.dom.fsThaw()
        self.snapshotted = True

    def generate_snapshot_xml(self):
        root_xml = ElementTree.Element("domainsnapshot")
        name_xml = ElementTree.SubElement(root_xml, "name")
        name_xml.text = self.dom.name() + "-tempsnap"
        desc_xml = ElementTree.SubElement(root_xml, "description")
        desc_xml.text = "Temporary snapshot used while backing up " + self.dom.name()
        memory_xml = ElementTree.SubElement(root_xml, "memory")
        memory_xml.attrib["snapshot"] = "no"
        disks_xml = ElementTree.SubElement(root_xml, "disks")
        for disk in self.disks:
            disk_xml = ElementTree.SubElement(disks_xml, "disk")
            if disk.snapshot_path is not None:
                disk_xml.attrib["name"] = disk.path
                source_xml = ElementTree.SubElement(disk_xml, "source")
                source_xml.attrib["file"] = disk.snapshot_path
                driver_xml = ElementTree.SubElement(disk_xml, "driver")
                driver_xml.attrib["type"] = "qcow2"
            else:
                disk_xml.attrib["name"] = disk.target
                disk_xml.attrib["snapshot"] = "no"
        return ElementTree.tostring(root_xml).decode("utf-8")

    def blockcommit(self, disks):
        for idx, disk in enumerate(disks):
            for commit_try in range(3):
                disk.failed = False
                if self.dom.blockCommit(
                    disk.target, None, None,
                    flags=libvirt.VIR_DOMAIN_BLOCK_COMMIT_ACTIVE
                        | libvirt.VIR_DOMAIN_BLOCK_COMMIT_SHALLOW) < 0:
                    print("Failed to start block commit for disk '{}'".format(
                        disk.target).ljust(65), file=sys.stderr)
                    disk.failed = True
                try:
                    while True:
                        info = self.dom.blockJobInfo(disk.target, 0)
                        if info is not None and self.progress:
                            progress = (idx + info["cur"] / info["end"]) / len(disks)
                            print("block commit progress ({}): {}%".format(
                                disk.target, int(100 * progress)).ljust(65), end="\u001b[65D")
                        elif info is None:
                            print("Failed to query block jobs for disk '{}'".format(
                                disk.target).ljust(65), file=sys.stderr)
                            disk.failed = True
                            break
                        if info["cur"] == info["end"]:
                            break
                        time.sleep(1)
                    if not disk.failed:
                        break
                finally:
                    if self.progress:
                        print("...pivoting...".ljust(65), end="\u001b[65D")
                    if self.dom.blockJobAbort(disk.target, libvirt.VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT) < 0:
                        suffix = "retrying..." if commit_try != 2 else "it may be in an inconsistent state"
                        print("Pivot failed for disk '{}', {}".format(disk.target, suffix).ljust(65), file=sys.stderr)
                        disk.failed = True
                        time.sleep(5)
                    else:
                        try:
                            os.remove(disk.snapshot_path)
                        except PermissionError:
                            print("Couldn't delete snapshot image '{}', please run as root".format(
                                disk.snapshot_path).ljust(65), file=sys.stderr)
                        break

    def offline_commit(self, disks):
        if self.progress:
            print("image commit progress: 0%".ljust(65), end="\u001b[65D")
        else:
            print("committing disk images")
        for idx, disk in enumerate(disks):
            for commit_try in range(3):
                disk.failed = False
                try:
                    subprocess.run(["qemu-img", "commit", disk.snapshot_path],
                                   stdout=subprocess.DEVNULL, check=True)
                    # restore the original image in domain definition
                    # this is done automatically when pivoting for live commit
                    new_xml = ElementTree.tostring(disk.xml).decode("utf-8")
                    try:
                        self.dom.updateDeviceFlags(new_xml)
                    except libvirt.libvirtError:
                        print("Device flags update failed for disk '{}'".format(
                            disk.target).ljust(65), file=sys.stderr)
                        print("Try replacing the path manually with 'virsh edit'", file=sys.stderr)
                        disk.failed = True
                        continue
                    try:
                        os.remove(disk.snapshot_path)
                    except PermissionError:
                        print("Couldn't delete snapshot image '{}', please run as root".format(
                            disk.snapshot_path).ljust(65), file=sys.stderr)
                    if self.progress:
                        progress = (idx + 1) / len(disks)
                        print("image commit progress ({}): {}%".format(
                            disk.target, int(100 * progress)).ljust(65), end="\u001b[65D")
                    break
                except FileNotFoundError:
                    # not very likely as the qemu-img tool is normally installed
                    # along with the libvirt/virsh stuff
                    print("Install qemu-img to commit changes offline".ljust(65), file=sys.stderr)
                    disk.failed = True
                    return
                except subprocess.CalledProcessError:
                    if commit_try == 2:
                        failed_str = "Commit failed for disk '{}', retrying..."
                    else:
                        failed_str = "Commit failed for disk '{}'"
                    print(failed_str.format(disk.target).ljust(65), file=sys.stderr)
                    disk.failed = True
                    time.sleep(5)

    def __enter__(self):
        return self

    def __exit__(self, *args):
        if not self.snapshotted:
            return False
        disks_to_backup = [x for x in self.disks if x.snapshot_path is not None]
        if self.dom.isActive():
            # the domain is online. we can use libvirt's blockcommit feature
            # to commit the contents & automatically pivot afterwards
            self.blockcommit(disks_to_backup)
        else:
            # the domain is offline, use qemu-img for offline commit instead.
            # libvirt doesn't support external snapshots as well as internal,
            # hence this workaround
            self.offline_commit(disks_to_backup)
        if self.progress:
            print()
        return False

import os, functools
class Config(dict):
    def __getattr__(self, key):
        return self[key]
    def __setattr__(self, key, val):
        self.update({key:val})

@functools.lru_cache(maxsize=1)
def get_config() -> Config:
    """Return a cached Config instance (singleton)."""
    return Config(
        ETCD_PREFIX = os.environ.get('ETCD_PREFIX', None),
        ETCD_SRV    = os.environ.get('ETCD_SRV', 'localhost'),
        ETCD_PORT   = os.environ.get('ETCD_PORT', 2379),
        ETCD_CA     = os.environ.get('ETCD_CA', None),
        ETCD_KEY    = os.environ.get('ETCD_KEY', None),
        ETCD_CERT   = os.environ.get('ETCD_CERT', None),
    )


import subprocess, threading
cmd = ['ping', '192.168.1.11']
proc = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
my_timer = threading.Timer(5, proc.kill)

try:
    my_timer.start()
    proc.stdin.close()
    for line in proc.stdout:
        logger.info(line)
    proc.wait()
finally:
    my_timer.cancel()


import asyncio
async def stream_subprocess(cmd: list[str], timeout: int = 10, msg:str='')->Generator:
    proc = await asyncio.create_subprocess_exec(
        *cmd,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.STDOUT,
    )
    try:
        if timeout > 0:
            async with asyncio.timeout(timeout):
                async for line in proc.stdout:
                    yield line.decode().rstrip()
        else:
            async for line in proc.stdout:
                yield line.decode().rstrip()
    except asyncio.TimeoutError:
        print(f'{msg} [Process killed: timeout exceeded]')
    finally:
        if proc.returncode is None:  # still running
            proc.kill()
            await proc.wait()

# Example usage
async def main(msg):
    async for line in stream_subprocess(["ping", "-c", "5", "192.168.1.11"], timeout=3, msg=msg):
        print(">>", line)

asyncio.run(main('msg---'))


import subprocess, threading, signal, json, os, logging
import utils
from flask import Flask, Response
from typing import List, Generator
logger = logging.getLogger(__name__)
logger.setLevel(level=os.getenv('LOG', 'DEBUG').upper())

app = Flask(__name__)

pids = utils.ShmListStore()
def wait_proc(uuid:str, cmd:List, tmout:int=0, redirect:bool = True, req_json: dict = {}, **kwargs)-> Generator:
    try:
        for p in pids.list_all(uuid=uuid):
            logger.info(f'PROC: {uuid} {p} found, kill all!!')
            os.kill(p.pid, signal.SIGTERM)
            pids.delete(uuid=uuid, pid=p.pid)
    except Exception as e:
        logger.error(f'PROC: {uuid} KILL {type(e).__name__} {str(e)}')
    output = subprocess.STDOUT if redirect else subprocess.PIPE
    with subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=output, text=True, bufsize=1, universal_newlines=True, env=kwargs) as proc:
        timer = threading.Timer(tmout, proc.terminate)
        try:
            timer.start()
            pids.insert(uuid=uuid, pid=proc.pid, cmd=cmd)
            logger.info(f'PROC: {uuid} PID={proc.pid} {cmd} start!!!')
            json.dump(req_json, proc.stdin, indent=4) # proc.stdin.write(req_json)
            proc.stdin.close()
            for line in proc.stdout:
                yield line
            proc.wait()
            if proc.returncode == 0:
                logger.info(f'PROC: {uuid} PID={proc.pid} {cmd} exit ok!!!')
            else:
                msg = ''.join(proc.stderr if not redirect else [])
                raise utils.APIException(f'PROC: {uuid} PID={proc.pid} {cmd} exit error={proc.returncode if proc.returncode > 0 else signal.Signals(-proc.returncode).name} {msg}')
        finally:
            timer.cancel()
            proc.terminate() # Ensure termination if still running
            pids.delete(uuid=uuid, pid=proc.pid)

@app.route('/run')
def run_command():
    command = ["ping", "192.168.1.11"]  # Example command
    uuid = '76212db1-d0e1-4ba3-a7b6-b71316fe1486'
    return Response(wait_proc(uuid, command, tmout=5), mimetype='text/plain')

######################################################################
### orig version shmstore
######################################################################
from multiprocessing import Manager
my_manager = Manager()
class ShmListStore:
    def __init__(self, name: Optional[str] = None, size: int = 10*KiB):
        self.cache = my_manager.list()

    def __len__(self):
        return len(self.cache)

    def __iter__(self):
        return iter(self.list_all())

    @classmethod
    def search(cls, arr, **kwargs) -> List:
        return [AttrDict(item) for item in arr if all(item.get(key) == value for key, value in kwargs.items())]

    def insert(self, **kwargs) -> None:
        self.cache.append(my_manager.dict(**kwargs))

    def delete(self, **kwargs) -> None:
        self.cache[:] = [item for item in self.cache if not all(item.get(key) == value for key, value in kwargs.items())]

    def reload(self, arr) -> None:
        self.cache[:] = [my_manager.dict(item) for item in arr]

    def get_one(self, **criteria) -> AttrDict:
        data = self.search(self.cache, **criteria)
        if len(data) == 1:
            return data[0]
        raise APIException(f'entry not found or not unique: {criteria} len={len(data)}')

    def list_all(self, **criteria) ->List:
        return self.search(self.cache, **criteria)
######################################################################
######################################################################
