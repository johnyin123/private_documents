#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from sqlalchemy import func,text,Column,String,Integer,DateTime,Enum,ForeignKey
from config import config, OUTDIR, META_SRV
import os

def load_file(file_path):
    if os.path.isfile(file_path):
        return open(file_path, "rb").read()
    raise Exception('file {} nofound'.format(file_path))

def file_exists(dirname, fn, msg):
    red='\033[31m'
    green='\033[32m'
    yellow='\033[33m'
    rst='\033[0m'
    if os.path.exists(os.path.join(dirname, fn)):
        print(f'  {green}SUCCESS{rst} ..{dirname[-15:]:15.15s}  --> {fn:20.20s} {green}OK{rst}')
        return True
    print(f'{yellow}{msg}{rst}')
    print(f'  {red}FAILED{rst}  ..{dirname[-15:]:15.15s}  --> {fn:20.20s} {red}NOFOUND{rst}')
    return False

path = OUTDIR
if not os.path.isdir(path):
    os.mkdir(path, 0o755)
path = config.ISO_DIR
if not os.path.isdir(path):
    os.mkdir(path, 0o755)
# # cdrom os install image dir
path = config.ISO_DIR + '/iso'
if not os.path.isdir(path):
    os.mkdir(path, 0o755)
path = config.GOLD_DIR
if not os.path.isdir(path):
    os.mkdir(path, 0o755)
path = config.ACTION_DIR
if not os.path.isdir(path):
    os.mkdir(path, 0o755)
path = config.DEVICE_DIR
if not os.path.isdir(path):
    os.mkdir(path, 0o755)
path = config.DOMAIN_DIR
if not os.path.isdir(path):
    os.mkdir(path, 0o755)
path = config.META_DIR
if not os.path.isdir(path):
    os.mkdir(path, 0o755)
path = config.TOKEN_DIR
if not os.path.isdir(path):
    os.mkdir(path, 0o755)
path = config.NOCLOUD_DIR
if not os.path.isdir(path):
    os.mkdir(path, 0o755)
path = config.REQ_JSON_DIR
if not os.path.isdir(path):
    os.mkdir(path, 0o755)
path = os.path.join(OUTDIR, 'novnc')
if not os.path.isdir(path):
    os.mkdir(path, 0o755)
path = os.path.join(OUTDIR, 'spice')
if not os.path.isdir(path):
    os.mkdir(path, 0o755)
path = os.path.join(OUTDIR, 'ui')
if not os.path.isdir(path):
    os.mkdir(path, 0o755)
file_exists(OUTDIR, 'ui/tpl.html', f'nginx admin.html')
file_exists(OUTDIR, 'ui/userui.html', f'nginx guest.html')
path = os.path.join(OUTDIR, 'term')
if not os.path.isdir(path):
    os.mkdir(path, 0o755)
file_exists(OUTDIR, 'console.py', f'console.py')
file_exists(OUTDIR, 'term/xterm.html', f'console xterm.html')
file_exists(OUTDIR, 'term/xterm.css', f'console xterm.css')
file_exists(OUTDIR, 'term/xterm.js', f'console xterm.js')

print(r'VNC:{}, SPICE:{}'.format(config.VNC_DISP_URL, config.SPICE_DISP_URL))

# create tables if not exists
import database as db

db.Base.metadata.drop_all(db.engine)
db.Base.metadata.create_all(db.engine)

print('''
# # kvmhost
| name   | tpl           | url                                        | ipaddr      |sshport| arch   |
|--------+---------------+--------------------------------------------+-------------+-------+--------|
| host01 | newvm.vnc.tpl | qemu+tls://192.168.168.1/system            |192.168.168.1| 60022 | x86_64 |
| demo   | newvm.vnc.tpl | qemu+ssh://root@192.168.168.1:60022/system |192.168.168.1| 60022 | x86_64 |
# # kvmdevice
| kvmhost | name       | devtype | tpl                             | action                          | desc             |
|---------+------------+---------+---------------------------------+---------------------------------+------------------|
| host01  | local-disk | disk    | storage.file.tpl | storage.file | 文件系统DISK     |
| host01  | rbd-disk   | disk    | armsite.rbd.tpl                 | armsite.rbd                     | RBD DISK         |
| host01  | net.br-ext | net     | net.br-ext.tpl                  |                                 | br-ext网桥       |
| host01  | debiso_x86 | iso     | cdrom.debian12.x86.tpl          |                                 | x86 debian安装CD |

# # kvmgold
| name     | arch    | tpl                        | desc                          |
| debian12 | x86_64  | bookworm.amd64.qcow2       | debian12 amd64 操作系统       |
| debian12 | aarch64 | bookworm.arm64.qcow2       | debian12 arm64 操作系统       |
| euler22  | x86_64  | openeuler2203.x86_64.qcow2 | openeuler 2203 amd64 操作系统 |
''')
hosts=[
    db.KVMHost(name='host01',tpl='newvm.vnc.tpl',url='qemu+tls://192.168.168.1/system',arch='x86_64',ipaddr='192.168.168.1',sshport=60022),
    db.KVMHost(name='demo',tpl='newvm.vnc.tpl',url='qemu+ssh://root@192.168.168.1:60022/system',arch='x86_64',ipaddr='192.168.168.1',sshport=60022),
]
host01_devs=[
    db.KVMDevice(kvmhost='host01',name='local-disk',devtype='disk',tpl='storage.file.tpl',action='storage.file',desc='文件系统DISK'),
    db.KVMDevice(kvmhost='host01',name='rbd-disk',devtype='disk',tpl='armsite.rbd.tpl',action='armsite.rbd',desc='RBD DISK'),
    db.KVMDevice(kvmhost='host01',name='net.br-ext',devtype='net',tpl='net.br-ext.tpl',action='',desc='br-ext网桥'),
    db.KVMDevice(kvmhost='host01',name='debiso_x86',devtype='iso',tpl='cdrom.debian12.x86.tpl',action='',desc='debian安装CD'),
]
db.session.add_all(hosts)  # db.session.add(host01)
db.session.add_all(host01_devs)
db.session.commit()

golds=[
    db.KVMGold(name='',arch='x86_64',  tpl='',desc='数据盘'),
    db.KVMGold(name='',arch='aarch64', tpl='',desc='数据盘'),
    db.KVMGold(name='debian12',arch='x86_64', tpl='bookworm.amd64.qcow2',desc='debian12 amd64 操作系统'),
    db.KVMGold(name='debian12',arch='aarch64',tpl='bookworm.arm64.qcow2',desc='debian12 arm64 操作系统'),
    db.KVMGold(name='euler22',arch='x86_64', tpl='openeuler2203.x86_64.qcow2',desc='openeuler 2203 amd64 操作系统'),
]
db.session.add_all(golds)
db.session.commit()

kvm_arm_srv4_host = db.KVMHost(name='kvm-arm-srv4',tpl='newvm.vnc.tpl',url='qemu+tls://10.170.24.5/system',arch='aarch64',ipaddr='10.170.24.5',sshport=60022)
kvm_arm_srv4_devs=[
    db.KVMDevice(kvmhost='kvm-arm-srv4',name='local-disk',devtype='disk',tpl='storage.file.tpl',action='storage.file',desc='文件系统DISK'),
    db.KVMDevice(kvmhost="kvm-arm-srv4",name="rbd-disk",devtype="disk",tpl="armsite.rbd.tpl",action="armsite.rbd",desc="ARMSITE RBD DISK"),
    db.KVMDevice(kvmhost="kvm-arm-srv4",name="net.br-ext",devtype="net",tpl="net.br-ext.tpl",action="",desc="br-ext网桥"),
    db.KVMDevice(kvmhost="kvm-arm-srv4",name="debiso_arm",devtype="iso",tpl="cdrom.debian12.arm.tpl",action="",desc="arm debian安装CD"),
]
db.session.add(kvm_arm_srv4_host)
db.session.add_all(kvm_arm_srv4_devs)
db.session.commit()
print('''
# # ~/.ssh/config
Host 10.170.24.5
    Port 60022
    User root
    Ciphers aes256-ctr,aes192-ctr,aes128-ctr
    MACs hmac-sha1
''')

kvm_x86_srv1_host = db.KVMHost(name='kvm-x86-srv1',tpl='newvm.vnc.tpl',url='qemu+ssh://root@10.170.24.20:60022/system',arch='x86_64',ipaddr='10.170.24.20',sshport=60022)
kvm_x86_srv1_devs=[
    db.KVMDevice(kvmhost="kvm-x86-srv1",name="rbd-disk",devtype="disk",tpl="x86site.rbd.tpl",action="x86site.rbd",desc="X86SITE RBD DISK"),
    db.KVMDevice(kvmhost="kvm-x86-srv1",name="net.br-ext",devtype="net",tpl="net.br-ext.tpl",action="",desc="br-ext网桥"),
    db.KVMDevice(kvmhost="kvm-x86-srv1",name="debiso_x86",devtype="iso",tpl="cdrom.debian12.x86.tpl",action="",desc="x86 debian安装CD")
]
db.session.add(kvm_x86_srv1_host)
db.session.add_all(kvm_x86_srv1_devs)
db.session.commit()

for r in db.Base.exesql(f'select * from kvmhost'):
    file_exists(config.DOMAIN_DIR, r.tpl, f'{r.name:10.10s} {r.arch:8.8s}')
for dev in db.Base.exesql(f'select * from kvmdevice'):
    file_exists(config.DEVICE_DIR, dev.tpl, f'{dev.devtype:5.5s} {dev.name}')
    if dev.action is not None and len(dev.action) != 0:
        file_exists(config.ACTION_DIR, dev.action, f'{dev.devtype:5.5s} {dev.name}')
    elif dev.devtype == 'disk' or dev.devtype == 'iso':
        content = load_file(os.path.join(config.DEVICE_DIR, dev.tpl))
        print(content.decode('utf-8'))

for gold in db.Base.exesql(f'select * from kvmgold'):
    file_exists(config.GOLD_DIR, gold.tpl, f'{gold.name:10.10s} {gold.arch:8.8s} {gold.desc}')

file_exists(config.META_DIR, 'meta_data', f'meta_data')
file_exists(config.META_DIR, 'user_data', f'user_data')

# sql="insert into tbl (name) values ('{name}')"
# dev={'name':'net'}
# db.Base.exesql(sql, **dev)

sql="select * from kvmhost"
results = db.Base.exesql(sql)
for r in results:
    print(f'{r.name:10s}|{r.arch:8s}|{r.tpl:10s}|{r.url:44s}|{r.desc}')
print('===================================')
sql="select * from kvmdevice order by kvmhost,devtype"
results = db.Base.exesql(sql)
for r in results:
    print(f'{r.devtype:4s}|{r.kvmhost:10s}|{r.name:10s}|{r.tpl:10s}|{r.desc}')
    #print(f'{r._asdict()}')
# results = db.Base.exesql('SELECT * FROM kvmhost join kvmdevice on kvmdevice.kvmhost = kvmhost.name')
# for r in results:
#     print(f'{r._asdict()}')
ngx_cfg='''upstream flask_app {
    server 127.0.0.1:5009 fail_timeout=0;
    keepalive 64;
}
upstream websockify {
    # websockify --token-plugin TokenFile --token-source ./token 6800
    server 127.0.0.1:6800;
    keepalive 64;
}
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}
server {
    # # OPTIONAL: libvirt upload domain xml hook
    listen 443 ssl;
    server_name kvm.registry.local;
    ssl_certificate     /etc/nginx/ssl/kvm.registry.local.pem;
    ssl_certificate_key /etc/nginx/ssl/kvm.registry.local.key;
    ssl_client_certificate /etc/nginx/ssl/kvm.ca.pem;
    ssl_verify_client on;
    location /domain {
        proxy_buffering                    off;
        proxy_request_buffering            off;
        client_max_body_size 1m;
        if ($request_method !~ ^(POST)$) { return 405 "Only POST"; }
        proxy_set_header X-CERT-DN $ssl_client_s_dn;
        # # need add all other headers, origin was overwrited
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port  $server_port;
        proxy_set_header Origin            $scheme://$host;
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_pass http://flask_app/domain;
    }
}
map $uri $kvmhost {
    "~*/user/vm/(list|start|stop|display)/(?<name>.*)/(.*)" $name;
}
map $uri $uuid {
    "~*/user/vm/(list|start|stop|display)/(.*)/(?<name>.*)" $name;
}
server {
    listen 443 ssl;
    server_name ${META_SRV};
    ssl_certificate     /etc/nginx/ssl/vmm.registry.local.pem;
    ssl_certificate_key /etc/nginx/ssl/vmm.registry.local.key;
    default_type application/json;
    location ~* .(favicon.ico)$ { access_log off; log_not_found off; add_header Content-Type image/svg+xml; return 200 '<svg width="104" height="104" fill="none" xmlns="http://www.w3.org/2000/svg"><rect width="104" height="104" rx="18" fill="url(#a)"/><path fill-rule="evenodd" clip-rule="evenodd" d="M56 26a4.002 4.002 0 0 1-3 3.874v5.376h15a3 3 0 0 1 3 3v23a3 3 0 0 1-3 3h-8.5v4h3a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-21a2 2 0 0 1-2-2v-6a2 2 0 0 1 2-2h3v-4H36a3 3 0 0 1-3-3v-23a3 3 0 0 1 3-3h15v-5.376A4.002 4.002 0 0 1 52 22a4 4 0 0 1 4 4zM21.5 50.75a7.5 7.5 0 0 1 7.5-7.5v15a7.5 7.5 0 0 1-7.5-7.5zm53.5-7.5a7.5 7.5 0 0 1 0 15v-15zM46.5 50a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0zm14.75 3.75a3.75 3.75 0 1 0 0-7.5 3.75 3.75 0 0 0 0 7.5z" fill="#fff"/><defs><linearGradient id="a" x1="104" y1="0" x2="0" y2="0" gradientUnits="userSpaceOnUse"><stop stop-color="#34C724"/><stop offset="1" stop-color="#62D256"/></linearGradient></defs></svg>'; }
    error_page 403 = @403;
    location @403 { return 403 '{"code":403,"name":"lberr","desc":"Resource Forbidden"}'; }
    error_page 404 = @404;
    location @404 { return 404 '{"code":404,"name":"lberr","desc":"Resource not found"}'; }
    error_page 405 = @405;
    location @405 { return 405 '{"code":405,"name":"lberr","desc":"Method not allowed"}'; }
    error_page 502 = @502;
    location @502 { return 502 '{"code":502,"name":"lberr","desc":"backend server not alive"}'; }
    # include /etc/nginx/http-enabled/jwt_sso_auth.inc;
    location / {
        # # default page is guest ui
        return 301 https://$server_name/guest.html;
    }
    location /tpl/ {
        # # proxy cache default is on, so modify host|device|gold, should clear ngx cache
        # auth_request @sso-auth;
        # host/device/gold can cached by proxy_cache default
        location ~* ^/tpl/(host|device|gold)/ {
            if ($request_method !~ ^(GET)$ ) { return 405; }
            proxy_pass http://flask_app;
        }
        return 404;
    }
    location /vm/ {
        # auth_request @sso-auth;
        # # no cache!! mgr private access
        proxy_cache off;
        location ~* ^/vm/(ipaddr|list|start|stop|delete|display|xml|ui|freeip)/ {
            if ($request_method !~ ^(GET)$ ) { return 405; }
            proxy_pass http://flask_app;
        }
        location ~* ^/vm/(create|attach_device|detach_device)/ {
            if ($request_method !~ ^(POST)$ ) { return 405; }
            # # for server stream output
            proxy_buffering                    off;
            proxy_request_buffering            off;
            proxy_pass http://flask_app;
        }
        return 404;
    }
    location = /admin.html {
        # auth_request @sso-auth;
        # # vmmgr ui page, mgr private access
        alias ${OUT_DIR}/ui/tpl.html;
    }
    location ~* ^/ui/.+\.(?:tpl|css|js|otf|eot|svg|ttf|woff|woff2)$ {
        # public access filename ext, other files 404
        autoindex off;
        root ${OUT_DIR};
    }
    location /websockify {
        # # /websockify used by admin & guest ui
        set $websockkey "${WEBSOCKKEY}";
        secure_link $arg_k,$arg_e;
        secure_link_md5 "$websockkey$secure_link_expires$arg_token$uri";
        if ($secure_link = "") { return 403; }
        if ($secure_link = "0") { return 410; }
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_pass http://websockify;
    }
    location  ~* ^/(novnc|spice|term) {
        # # novnc/spice, pubic access by admin & guest ui
        client_max_body_size 0;
        autoindex off;
        root ${OUT_DIR};
    }
    # # tanent user UI manager tanent vm by uuid
    location = /guest.html {
        # # guest user ui page, guest private access
        alias ${OUT_DIR}/ui/userui.html;
    }
    # # tanent api
    location /user/ {
        # # no cache!! guest user api, guest private access
        proxy_cache off;
        location /user/vm/list/ {
            set $userkey "${USERKEY}";
            secure_link $arg_k,$arg_e;
            secure_link_md5 "$userkey$secure_link_expires$kvmhost$uuid";
            if ($secure_link = "") { return 403; }
            if ($secure_link = "0") { return 410; }
            if ($request_method !~ ^(GET)$ ) { return 405; }
            proxy_pass http://flask_app/vm/list/;
        }
        location /user/vm/stop/ {
            set $userkey "${USERKEY}";
            secure_link $arg_k,$arg_e;
            secure_link_md5 "$userkey$secure_link_expires$kvmhost$uuid";
            if ($secure_link = "") { return 403; }
            if ($secure_link = "0") { return 410; }
            if ($request_method !~ ^(GET)$ ) { return 405; }
            proxy_pass http://flask_app/vm/stop/;
        }
        location /user/vm/start/ {
            set $userkey "${USERKEY}";
            secure_link $arg_k,$arg_e;
            secure_link_md5 "$userkey$secure_link_expires$kvmhost$uuid";
            if ($secure_link = "") { return 403; }
            if ($secure_link = "0") { return 410; }
            if ($request_method !~ ^(GET)$ ) { return 405; }
            proxy_pass http://flask_app/vm/start/;
        }
        location /user/vm/display/ {
            set $userkey "${USERKEY}";
            secure_link $arg_k,$arg_e;
            secure_link_md5 "$userkey$secure_link_expires$kvmhost$uuid";
            if ($secure_link = "") { return 403; }
            if ($secure_link = "0") { return 410; }
            if ($request_method !~ ^(GET)$ ) { return 405; }
            proxy_pass http://flask_app/vm/display/;
        }
        return 403;
    }
}
# upstream meta_static {
#     server 127.0.0.1:5009 fail_timeout=0;
#     keepalive 64;
# }
server {
    listen 80;
    server_name ${META_SRV};
    # # only download iso file, and subdir iso
    location ~* \.(iso)$ {
        # rewrite ^ /public/iso$uri break;
        # proxy_pass http://meta_static;
        autoindex off;
        root ${OUT_DIR}/iso;
    }
    # # only download meta-data/user-data and subdir meta-data/user-data
    location ~* \/(meta-data|user-data)$ {
        # rewrite ^ /public/nocloud$uri break;
        # proxy_pass http://meta_static;
        # proxy_next_upstream  http_403 | http_404 | off ...;
        autoindex off;
        root ${OUT_DIR}/nocloud;
    }
    location / {
        # others all to https
        return 301 https://$server_name$request_uri;
    }
}
'''
ngx_cfg = ngx_cfg.replace('${META_SRV}', META_SRV)
ngx_cfg = ngx_cfg.replace('${WEBSOCKKEY}', config.WEBSOCKIFY_SECURE_LINK_MYKEY)
ngx_cfg = ngx_cfg.replace('${USERKEY}', config.USER_ACCESS_SECURE_LINK_MYKEY)
ngx_cfg = ngx_cfg.replace('${OUT_DIR}', OUTDIR)
with open('kvm.conf', "w") as file:
    file.write(ngx_cfg)
print('''
nohup websockify --token-plugin TokenFile --token-source ${OUTDIR}/token/ 127.0.0.1:6800 &> websockify.log &
nohup gunicorn -b 127.0.0.1:5009 --preload --workers=$(nproc) --threads=2 --access-logfile='-' 'main:app' &> srv.log &
''')
