# https://docs.opennebula.io
#######################################################################################
# Install
#######################################################################################
password=mypassword
apt update && apt install wget gnupg2 apt-transport-https -y
curl -fsSL https://downloads.opennebula.io/repo/repo2.key|gpg --dearmor -o /etc/apt/trusted.gpg.d/opennebula.gpg
# wget -q -O- 'https://repo.dovecot.org/DOVECOT-REPO-GPG' | gpg --dearmor > /etc/apt/trusted.gpg.d/dovecot-archive-keyring.gpg
### Debian 12 / Debian 11 ###
echo "deb https://downloads.opennebula.io/repo/6.6/Debian/11 stable opennebula" | tee /etc/apt/sources.list.d/opennebula.list
### Debian 10 ###
echo "deb https://downloads.opennebula.io/repo/6.6/Debian/10 stable opennebula" | tee /etc/apt/sources.list.d/opennebula.list
# # make private repo for install, see k8s/gen_k8s_pkg.sh
apt update && apt -y install vim opennebula opennebula-sunstone opennebula-gate opennebula-flow opennebula-provision opennebula-fireedge
    # opennebula: OpenNebula Daemon and Scheduler.
    # opennebula-common: Shared content for OpenNebula packages.
    # opennebula-common-onescape: Helpers for OneScape project.
    # opennebula-tools: Command Line Interface.
    # opennebula-sunstone: Sunstone (the GUI) and the EC2 API.
    # opennebula-gate: OneGate server that enables communication between VMs and OpenNebula.
    # opennebula-flow: OneFlow manages services and elasticity.
    # opennebula-provision: OneProvision deploys new clusters on remote bare-metal cloud providers.
    # opennebula-node: Dependencies and configurations for KVM hypervisor node.
    # opennebula-node-firecracker: Dependencies and configurations for Firecracker hypervisor node.
    # opennebula-node-lxd: Dependencies and configurations for LXD hypervisor node.
    # opennebula-lxd-snap: Meta-package to install LXD snap (only on Ubuntu 16.04 and 18.04).
    # opennebula-rubygems: Bundled Ruby gem dependencies.
    # opennebula-dbgsym: Package with debug information.
    # ruby-opennebula: Ruby Bindings.
    # libopennebula-java: Java Bindings.
    # libopennebula-java-doc: Java Bindings Documentation.
    # python-pyone: Python 2 Bindings (not on Ubuntu 20.04 and later).
    # python3-pyone: Python 3 Bindings.
# # now install kvm hosts, and then add hosts
cat /var/lib/one/.one/one_auth
echo "oneadmin:${password:-password}" > /var/lib/one/.one/one_auth
systemctl enable opennebula --now
systemctl enable opennebula-sunstone --now
systemctl enable opennebula-fireedge --now
# Verify OpenNebula Frontend installation
sudo -u oneadmin oneuser show
echo "  Port 60022" >> /var/lib/one/.ssh/config
cat /var/lib/one/.ssh/id_rsa.pub
# 分发身份验证
sudo -u oneadmin ssh-copy-id -p60022 -i /var/lib/one/.ssh/id_rsa.pub oneadmin@ipaddr
# # 创建known_hosts
# ssh-keyscan <frontend> <node1> <node2> <node3> ... >> /var/lib/one/.ssh/known_hosts
# scp -p /var/lib/one/.ssh/known_hosts <node1>:/var/lib/one/.ssh/
# # To change oneadmin password, follow the next steps:
# oneuser passwd 0 <PASSWORD>
# echo 'oneadmin:PASSWORD' > /var/lib/one/.one/one_auth

# Login to  Sunstone web interface
http://<frontend_address>:9869
http://<fireedge>:2616 , for non admin user manager vms
#########################################
# # install OpenNebula KVM Node
apt -y install opennebula-node-kvm
echo "oneadmin:${password:-password}" |chpasswd
systemctl restart libvirtd
systemctl enable libvirtd
phy_bridge=br-ext
cat << EOF
allow-hotplug eth0
iface eth0 inet manual

auto ${phy_bridge} 
iface ${phy_bridge} inet static
    bridge_ports eth0
    bridge_maxwait 0
    address 192.168.168.151/24
    gateway 192.168.168.1
EOF
#######################################################################################
# Manage
#######################################################################################
# Downloading script:
 wget http://www.redmine.org/attachments/download/6239/sqlite3-to-mysql.py
# Converting:
 sqlite3 /var/lib/one/one.db .dump | ./sqlite3-to-mysql.py > mysql.sql
 mysql -u oneadmin -p opennebula < mysql.sql
# Change /etc/one/oned.conf from
 DB = [ backend = "sqlite" ]
# to
 DB = [ backend = "mysql",
      server  = "localhost",
      port    = 0,
      user    = "oneadmin",
      passwd  = "PASS",
      db_name = "opennebula" ]
systemctl restart opennebula opennebula-sunstone
# check logs for errors (/var/log/one/oned.log /var/log/one/sched.log /var/log/one/sunstone.log)
#########################################
# # Add cluster
c_name=mycluster
sudo -u oneadmin onecluster create ${c_name}
sudo -u oneadmin onecluster list
#########################################
# # Add host
sudo -u oneadmin onehost create --cluster ${c_name} --im kvm --vm kvm 192.168.168.111
sudo -u oneadmin onehost list
#########################################
# # Add net template
vntpl_name="vnetwork"
cat << EOT | sudo -u oneadmin tee /tmp/net.tpl
NAME=${vntpl_name}
VN_MAD="bridge"
BRIDGE="${phy_bridge}"
EOT
sudo -u oneadmin onevntemplate create /tmp/net.tpl
rm -f /tmp/net.tpl
echo "change the permissions to make it available for the users you want"
id=$(onevntemplate list  | grep "${vntpl_name}" | awk '{ print $1 }')
onevntemplate chmod ${id} 604
onevntemplate show ${id}
# onevntemplate instantiate 0 --user user --name private
# onevnet list
#########################################
# # Add net
n_name=mynet
cat << EOF | sudo -u oneadmin tee /tmp/def.net
 NAME       ="${n_name}"
 BRIDGE     ="${phy_bridge}"
 BRIDGE_TYPE="linux"
 VN_MAD     ="bridge"
 NETWORK_ADDRESS = 192.168.14.0
 NETWORK_SIZE    = C
EOF
sudo -u oneadmin onevnet create --cluster ${c_name} /tmp/def.net
rm -f /tmp/def.net
#########################################
# # Datastore
cat <<'EOF'
# The Image Datastore, stores the Image repository.
# The System Datastore holds disk for running virtual machines, usually cloned from the Image Datastore.
# The Files & Kernels Datastore to store plain files used in contextualization, or VM kernels used by some hypervisors.
Datastore Layout
    Images are saved into the corresponding datastore directory (/var/lib/one/datastores/<DATASTORE ID>).
    Also, for each running virtual machine there is a directory (named after the VM ID) in the
    corresponding System Datastore. These directories contain the VM disks and additional files,
    e.g. checkpoint or snapshots.
  For example, a system with an Image Datastore (1) with three images and 3 Virtual Machines
  (VM 0 and 2 running, and VM 7 stopped) running from System Datastore 0 would present the following layout:
/var/lib/one/datastores
|-- 0/
|   |-- 0/
|   |   |-- disk.0
|   |   `-- disk.1
|   |-- 2/
|   |   `-- disk.0
|   `-- 7/
|       |-- checkpoint
|       `-- disk.0
`-- 1
    |-- 05a38ae85311b9dbb4eb15a2010f11ce
    |-- 2bbec245b382fd833be35b0b0683ed09
    `-- d0e0df1fb8cfa88311ea54dfbcfc4b0c
The canonical path for /var/lib/one/datastores can be changed in oned.conf with the DATASTORE_LOCATION configuration attribute
EOF
# Create a System Datastore
# TM_MAD:
#     shared for shared transfer mode
#     qcow2 for qcow2 transfer mode
#     ssh for ssh transfer mode
sys_datastore=sysds
cat << EOF | sudo -u oneadmin tee /tmp/sys.store
NAME    = ${sys_datastore}
TM_MAD  = ssh
TYPE    = SYSTEM_DS
EOF
sudo -u oneadmin onedatastore create --cluster ${c_name} /tmp/sys.store
rm -f /tmp/sys.store
#########################################
# Create an Image Datastore
# TM_MAD:
#     shared for shared transfer mode
#     qcow2 for qcow2 transfer mode
#     ssh for ssh transfer mode
img_datastore=imgds
cat << EOF | sudo -u oneadmin tee /tmp/img.store
NAME   = ${img_datastore}
DS_MAD = fs
TM_MAD = ssh
EOF
sudo -u oneadmin onedatastore create --cluster ${c_name} /tmp/img.store
rm -f /tmp/img.store
#########################################
img_tpl=debian
sudo -u oneadmin oneimage create --datastore ${img_datastore} --name ${img_tpl} --path /var/tmp/debian.raw --description "debian vm tpl image."
sudo -u oneadmin oneimage show ${img_tpl}
sudo -u oneadmin onetemplate create --arch x86_64 --vnc --name debian_tpl --memory 128 --cpu 1 --disk "${img_tpl}" --nic ${n_name}
#########################################
cat <<EOF | sudo -u oneadmin tee /tmp/centos.tpl
NAME          = "centos"
PATH          = "/tmp/centos.raw"
DESCRIPTION   = "centos vm tpl image."
EOF
sudo -u oneadmin oneimage create --datastore ${img_datastore} /tmp/centos.tpl
rm -f /tmp/centos.tpl
#########################################
cat <<EOF
oneimage clone Ubuntu new_image --datastore new_img_ds
oneimage show 0
oneimage chmod 0 640
oneimage show 0
EOF
#########################################
# # vm template, onetemplate create
cat <<EOF
NAME   = debian0os 
MEMORY = 128
CPU    = 1
DISK = [ IMAGE  = "${img_tpl}" ]
NIC = [ NETWORK = "${n_name}", NAME = "private_net" ]
GRAPHICS = [
  TYPE    = "vnc",
  LISTEN  = "0.0.0.0"]
EOF
#######################################################################################
# Doc 
#######################################################################################
# Create image rbd datastore. (su oneadmin)
cat << EOT | sudo -u oneadmin tee /tmp/rbd.store
 NAME      = "cephds"
 DS_MAD    = ceph
 TM_MAD    = ceph
 DISK_TYPE = RBD
 POOL_NAME = one
 BRIDGE_LIST ="192.168.14.42 192.168.14.43 192.168.14.44"
 CEPH_HOST ="172.19.254.1:6789 172.19.254.2:6789 172.19.254.3:6789"
 CEPH_SECRET ="cfb34c4b-d95c-4abc-a4cc-f8a2ae532cb5" #uuid key, looked at libvirt authentication for ceph
 CEPH_USER = oneadmin
EOT
sudo -u oneadmin onedatastore create /tmp/rbd.store
rm -f /tmp/rbd.store

# Add nodes, vnets, datastories to created cluster with web management.
# Create system ceph datastore.
onedatastore list
on all nodes create directory and mount ceph
