# juniper EX4200 802.3ad  xmit_hash_policy=layer3+4
configure
edit system services
set web-management http port 8888
commit

EX4200T-VC-01-133.10> show configuration | display set | grep ge-2/0/44
set interfaces ge-2/0/44 disable
set interfaces ge-2/0/44 ether-options 802.3ad ae5
set interfaces ge-3/0/44 disable
set interfaces ge-3/0/44 ether-options 802.3ad ae5
set interfaces ae5 aggregated-ether-options lacp active
set interfaces ae5 unit 0 family ethernet-switching port-mode trunk
set interfaces ae5 unit 0 family ethernet-switching vlan members all
#set interfaces ae0 unit 0 family inet address 172.16.16.1/30 (三层)

#ospf
set routing-options router-id 1.1.1.1
set protocols ospf area 0.0.0.0 area-range 192.168.167.0/24
set protocols ospf area 0.0.0.0 interface ae0.0
set protocols ospf area 0.0.0.0 interface ae0.0 authentication md5 1 key keypassword
lab# show protocols ospf
area 0.0.0.0 {
    area-range 192.168.167.0/24;
    interface ae0.0 {
        authentication {
            md5 1 key "$9$YUoZjmPQF/t.P5F/9B1Ndb2Zj6/t01hk."; ## SECRET-DATA
        }
    }
}

H3C:
  # Init(admin/admin:192.168.1.1)
    reset saved-configuration
    reboot

  #配置双线连接堆叠
    SW1配置:
      1.将优先级调整为32;确保该设备被选举为Master;若不需要指定主设备可以略过
        irf member 1 priority 32
      2.关闭要加入的IRF的物理端口
        interface Ten-G1/0/49
        shutdown
        interface Ten-G1/0/50
        shutdown
      3.创建IRF逻辑虚接口(设备号默认为1,端口号为2),把相连物理接口加入IRF
        irf-port 1/2
        port group interface Ten-GigabitEthernet 1/0/49
        port group interface Ten-GigabitEthernet 1/0/50
      4.重新打开物理端口
        interface Ten-G1/0/49
        undo shutdown
        interface Ten-G1/0/50
        undo shutdown
      5.激活IRF设置并保存配置
        irf-port-configuration active
        safe f
    SW2配置:
      1.更改默认的设备号1为2并重启
        irf member 1 renumber 2
        reboot
      2.关闭要加入的IRF的物理端口
        interface Ten-G2/0/49
        shutdown
        interface Ten-G2/0/50
        shutdown
      3.创建IRF逻辑虚接口(设备号为2,端口号为1),把相连物理接口加入IRF
        irf-port 2/1
        port group interface Ten-GigabitEthernet 2/0/49
        port group interface Ten-GigabitEthernet 2/0/50
      4.重新打开物理端口,保存配置
        interface Ten-G2/0/49
        undo shutdown
        interface Ten-G2/0/50
        undo shutdown
      5.激活IRF设置,激活配置后,slave设备会自动重启
        safe f
        irf-port-configuration active
    验证配置,查看状态
        display irf

  # 创建二层聚合接口1,并配置该接口为动态聚合模式
    sys
    interface bridge-aggregation 1
    link-aggregation mode dynamic
    # 配置二层聚合接口1为Trunk端口,并允许VLAN 10和20的报文通过。
    interface bridge-aggregation 1
    port link-type trunk
    port trunk permit vlan all/10 20
    quit
  # 配置全局按照报文的源MAC地址和目的MAC地址进行聚合负载分担。
    link-aggregation load-sharing mode source-mac destination-mac
    display link-aggregation summary
    display link-aggregation load-sharing mode
    # 分别将端口GigabitEthernet1/0/1,GigabitEthernet1/0/2加入到聚合组1中。
    interface gigabitethernet 1/0/1
    port link-aggregation group 1
    quit
    interface gigabitethernet 1/0/2
    port link-aggregation group 1
    quit

# H3C交换机
    ## 基本配置
        system-view   //**进入系统视图**
        sysname xxx   //设置主机名成为xxx这里使用修改特权用户密码
    ## 用户配置
        system-view
        super password H3C     //设置用户分级密码
        undo superpassword     //删除用户分级密码
        localuser bigheap 1234561     //Web网管用户设置,1为管理级用户
        undo localuser bigheap    //删除Web网管用户
        user-interface aux 0     //只支持0
        idle-timeout 250     //设置超时为2分50秒,若为0则表示不超时,默认为5分钟
        undoidle-timeout     //恢复默认值
        set authentication password123456     //设置telnet密码,必须设置
        undo set authentication password   //取消密码
        displayusers     //显示用户
        displayuser-interface     //用户界面状态
    ## vlan配置
[H3C]vlan 2         **//创建VLAN2**
[H3C]undo vlan all     //删除除缺省VLAN外的所有VLAN,缺省VLAN不能被删除
[H3C-vlan2]port Ethernet 0/4 to Ethernet0/7     //将4到7号端口加入到VLAN2中,此命令只能用来加access端口,不能用来增加trunk或者hybrid端口
[H3C-vlan2]port-isolate enable    //打开VLAN内端口隔离特性，不能二层转发,**默认不启用该功能**
[H3C-Ethernet0/4]port-isolate uplink-portvlan 2    //设置4为VLAN2的**隔离上行端口**，用于转发二层数据,只能配置一个上行端口,若为trunk,则建议允许所有VLAN通过,隔离不能与汇聚同时配置
[H3C]display vlan all     //**显示所有VLAN的详细信息**
[H3C]user-group 20     //创建user-group 20，默认只存在user-group 1
[H3C-UserGroup20]port Ethernet 0/4 toEthernet 0/7     //**将4到7号端口加入到VLAN20中，**初始时都属于user-group 1中
[H3C]display user-group 20     //显示user-group 20的相关信息
    ## 交换机IP配置
[H3C]vlan 20        //**创建vlan**
[H3C]management-vlan 20     //管理vlan
[H3C]interface vlan-interface 20      //**进入并管理vlan20**
[H3C]undo interface vlan-interface 20      //删除管理VLAN端口
[H3C-Vlan-interface20]ip address192.168.1.2 255.255.255.0    //**配置管理VLAN接口静态IP地址**
[H3C-Vlan-interface20]undo ipaddress      //删除IP地址
[H3C-Vlan-interface20]ip gateway 192.168.1.1      //指定缺省网关(默认无网关地址)
[H3C-Vlan-interface20]undo ip gateway
[H3C-Vlan-interface20]shutdown     //**关闭接口**
[H3C-Vlan-interface20]undo shutdown      //开启
[H3C]display ip      //显示管理VLAN接口IP的相关信息
[H3C]display interface vlan-interface20      //查看管理VLAN的接口信息
debugging ip      //开启IP调试功能
undo debugging ip

    ## 端口配置
[H3C]interface Ethernet0/3       //进入端口
[H3C-Ethernet0/3]shutdown      //关闭端口
[H3C-Ethernet0/3]speed 100      //速率可为10,100,1000和auto(缺省)
[H3C-Ethernet0/3]duplexfull      //**双工,可**为half,full和auto，光口和汇聚后不能配置
[H3C-Ethernet0/3]flow-control     //**开启流控，默认为关闭**
[H3C-Ethernet0/3]broadcast-suppression 20      //设置抑制广播百分比为20%,可取5,10,20,100,缺省为100,同时组播和未知单播也受此影响
[H3C-Ethernet0/3]loopback internal      //内环测试
[H3C-Ethernet0/3]port link-type trunk      //设置链路的**类型为trunk**
[H3C-Ethernet0/3]port trunk pvid vlan 20      //设置20为该trunk的缺省VLAN，默认为1(trunk线路两端的PVID必须一致)
[H3C-Ethernet0/3]port access vlan 20      //将当前**access端口加入指定的VLAN**
[H3C-Ethernet0/3]port trunk permit vlan all      //允许**所有的VLAN通过当前的trunk端口,**可多次使用该命令
[H3C]link-aggregation Ethernet 0/1 to Ethernet 0/4      //**将1-4口加入汇聚组,**1为主端口,两端需要同时配置,设置了端口镜像以及端口隔离的端口无法汇聚
[H3C]undo link-aggregation Ethernet 0/1   //删除该汇聚组
[H3C]link-aggregation mode egress      //配置端口汇聚模式为根据目的MAC地址进行负荷分担,可选为 ingress,egress和both,缺省为both
[H3C]monitor-port Ethernet 0/2      //**将该端口设置为镜像端口**,必须先设置镜像端口,删除时必须先删除被镜像端口,而且它们不能同在一个端口,该端口不能在汇聚组中,设置新镜像端口时,新取代旧,被镜像不变
[H3C]mirroring-port Ethernet 0/3 toEthernet 0/4 both      //将**端口3和4设置为被镜像端口**,both为同时监控接收和发送的报文,inbound表示仅监控接收的报文,outbound表示仅监控发送的报文
[H3C]display mirror
[H3C]display interface Ethernet 0/3
resetcounters      //**清除所有端口的统计信息**


#华为交换:
    ## 创建VLAN
        system-view
        vlan 100
        quit
    ## 将端口加入到vlan中
        interface GigabitEthernet2/0/1
        port link-type access
        port default vlan 100
        quit
    ## 交换机配置IP地址
        interface Vlanif100
        ip address 192.168.1.1 255.255.255.0
        quit
    ## 配置默认网关
        ip route-static 0.0.0.0 0.0.0.0 192.168.1.254
    ## 交换机保存设置和重置命令
        save    //保存配置信息
        reset saved-configuration   //重置交换机的配置
        reboot   //重新启动交换机

    ## 交换机常用的显示命令
        ### 用户视图模式下：
            display current-configuration   //显示现在交换机正在运行的配置明细
            display device    //显示各设备状态
            display interface xxx  //显示个端口状态，用？可以查看后边跟的选项
            display version   //查看交换机固件版本信息
            display vlan xxx   // 查看vlan的配置信息

############################################################
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display current-configuration')
print(output)
net_connect.disconnect()

# 配置华为交换机
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}

net_connect = ConnectHandler(**huawei_switch)
config_commands = ['interface gigabitethernet 0/0/1', 'ip address 192.168.2.1 255.255.255.0']
output = net_connect.send_config_set(config_commands)
print(output)
net_connect.disconnect()

# 查看华为交换机端口信息
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display interface GigabitEthernet0/0/1')
print(output)
net_connect.disconnect()

# 查看华为交换机接口状态
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display interface GigabitEthernet0/0/1')
if 'Line protocol state' in output and 'UP' in output:
    print('Interface is UP')
else:
    print('Interface is DOWN')
net_connect.disconnect()

# 查看华为交换机 ARP 表
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display arp')
print(output)
net_connect.disconnect()

# 查看华为交换机 CPU 使用率
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display cpu-usage')
print(output)
net_connect.disconnect()

# 查看华为交换机内存使用情况
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display memory-usage')
print(output)
net_connect.disconnect()

# 查看华为交换机端口带宽利用率
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display interface GigabitEthernet0/0/1 | include "Input rate|"Output rate"')
print(output)
net_connect.disconnect()

# 查看华为交换机 VLAN 信息
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display vlan')
print(output)
net_connect.disconnect()

# 查看华为交换机MAC表
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display mac-address')
print(output)
net_connect.disconnect()
