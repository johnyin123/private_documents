# juniper EX4200 802.3ad  xmit_hash_policy=layer3+4
configure
edit system services
set web-management http port 8888
commit

EX4200T-VC-01-133.10> show configuration | display set | grep ge-2/0/44
set interfaces ge-2/0/44 disable
set interfaces ge-2/0/44 ether-options 802.3ad ae5
set interfaces ge-3/0/44 disable
set interfaces ge-3/0/44 ether-options 802.3ad ae5
set interfaces ae5 aggregated-ether-options lacp active
set interfaces ae5 unit 0 family ethernet-switching port-mode trunk
set interfaces ae5 unit 0 family ethernet-switching vlan members all
#set interfaces ae0 unit 0 family inet address 172.16.16.1/30 (三层)

#ospf
set routing-options router-id 1.1.1.1
set protocols ospf area 0.0.0.0 area-range 192.168.167.0/24
set protocols ospf area 0.0.0.0 interface ae0.0
set protocols ospf area 0.0.0.0 interface ae0.0 authentication md5 1 key keypassword
lab# show protocols ospf
area 0.0.0.0 {
    area-range 192.168.167.0/24;
    interface ae0.0 {
        authentication {
            md5 1 key "$9$YUoZjmPQF/t.P5F/9B1Ndb2Zj6/t01hk."; ## SECRET-DATA
        }
    }
}

# H3C交换机
********************************************************************************
*                                                                              *
*                   H3C S6520X-30QC-EI BOOTROM, Version 118                    *
*                                                                              *
********************************************************************************
Copyright (c) 2004-2021 New H3C Technologies Co., Ltd.

Creation Date       : Aug 16 2021, 17:47:05
CPU Clock Speed     : 1600MHz
Memory Size         : 2048MB
Flash Size          : 1024MB
CPLD Version        : 001/003
PCB Version         : Ver.A

********************************************************************************
*                                                                              *
*                     H3C S6300-42QT BOOTROM, Version 132                      *
*                                                                              *
********************************************************************************
Copyright (c) 2004-2014 Hangzhou H3C Technologies Co., Ltd.

Creation Date   : Apr 22 2014,13:54:50
CPU Clock Speed : 1000MHz
Memory Size     : 2048MB
Flash Size      : 512MB
CPLD Version    : 003/003
PCB Version     : Ver.B

    <H3C>system-view 
    [H3C]sysname tsd01
    [tsd01]local-user admin (admin/tsd01_password)
    [H3C-luser-manage-admin] password simple tsd01_password
    [H3C-luser-manage-admin] service-type http https
    [H3C-luser-manage-admin] authorization-attribute user-role network-admin
    [H3C-luser-manage-admin] quit
    [tsd01]interface M-GigabitEthernet 0/0/0
    [tsd01-M-GigabitEthernet0/0/0]ip address 192.168.1.1 24 
    [tsd01-M-GigabitEthernet0/0/0]quit
    [H3C]ip http enable        
    [H3C]ip https enable       
    [H3C]save force     
    
  # Init
    reset saved-configuration
    reboot

  #配置双线连接堆叠
    SW1配置:
      1.将优先级调整为32;确保该设备被选举为Master;若不需要指定主设备可以略过
        irf member 1 priority 32
      2.关闭要加入的IRF的物理端口
        interface Ten-G1/0/49
        shutdown
        interface Ten-G1/0/50
        shutdown
      3.创建IRF逻辑虚接口(设备号默认为1,端口号为2),把相连物理接口加入IRF
        irf-port 1/2
        port group interface Ten-GigabitEthernet 1/0/49
        port group interface Ten-GigabitEthernet 1/0/50
      4.重新打开物理端口
        interface Ten-G1/0/49
        undo shutdown
        interface Ten-G1/0/50
        undo shutdown
      5.激活IRF设置并保存配置
        irf-port-configuration active
        safe f
    SW2配置:
      1.更改默认的设备号1为2并重启
        irf member 1 renumber 2
        reboot
      2.关闭要加入的IRF的物理端口
        interface Ten-G2/0/49
        shutdown
        interface Ten-G2/0/50
        shutdown
      3.创建IRF逻辑虚接口(设备号为2,端口号为1),把相连物理接口加入IRF
        irf-port 2/1
        port group interface Ten-GigabitEthernet 2/0/49
        port group interface Ten-GigabitEthernet 2/0/50
      4.重新打开物理端口,保存配置
        interface Ten-G2/0/49
        undo shutdown
        interface Ten-G2/0/50
        undo shutdown
      5.激活IRF设置,激活配置后,slave设备会自动重启
        safe f
        irf-port-configuration active
    验证配置,查看状态
        display irf

  # 创建二层聚合接口1,并配置该接口为动态聚合模式
    sys
    interface bridge-aggregation 1
    link-aggregation mode dynamic
    # 配置二层聚合接口1为Trunk端口,并允许VLAN 10和20的报文通过。
    interface bridge-aggregation 1
    port link-type trunk
    port trunk permit vlan all/10 20
    quit
  # 配置全局按照报文的源MAC地址和目的MAC地址进行聚合负载分担。
    link-aggregation load-sharing mode source-mac destination-mac
    display link-aggregation summary
    display link-aggregation load-sharing mode
    # 分别将端口GigabitEthernet1/0/1,GigabitEthernet1/0/2加入到聚合组1中。
    interface gigabitethernet 1/0/1
    port link-aggregation group 1
    quit
    interface gigabitethernet 1/0/2
    port link-aggregation group 1
    quit



#华为交换:
    ## 创建VLAN
        system-view
        vlan 100
        quit
    ## 将端口加入到vlan中
        interface GigabitEthernet2/0/1
        port link-type access
        port default vlan 100
        quit
    ## 交换机配置IP地址
        interface Vlanif100
        ip address 192.168.1.1 255.255.255.0
        quit
    ## 配置默认网关
        ip route-static 0.0.0.0 0.0.0.0 192.168.1.254
    ## 交换机保存设置和重置命令
        save    //保存配置信息
        reset saved-configuration   //重置交换机的配置
        reboot   //重新启动交换机

    ## 交换机常用的显示命令
        ### 用户视图模式下：
            display current-configuration   //显示现在交换机正在运行的配置明细
            display device    //显示各设备状态
            display interface xxx  //显示个端口状态，用？可以查看后边跟的选项
            display version   //查看交换机固件版本信息
            display vlan xxx   // 查看vlan的配置信息

############################################################
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display current-configuration')
print(output)
net_connect.disconnect()

# 配置华为交换机
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}

net_connect = ConnectHandler(**huawei_switch)
config_commands = ['interface gigabitethernet 0/0/1', 'ip address 192.168.2.1 255.255.255.0']
output = net_connect.send_config_set(config_commands)
print(output)
net_connect.disconnect()

# 查看华为交换机端口信息
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display interface GigabitEthernet0/0/1')
print(output)
net_connect.disconnect()

# 查看华为交换机接口状态
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display interface GigabitEthernet0/0/1')
if 'Line protocol state' in output and 'UP' in output:
    print('Interface is UP')
else:
    print('Interface is DOWN')
net_connect.disconnect()

# 查看华为交换机 ARP 表
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display arp')
print(output)
net_connect.disconnect()

# 查看华为交换机 CPU 使用率
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display cpu-usage')
print(output)
net_connect.disconnect()

# 查看华为交换机内存使用情况
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display memory-usage')
print(output)
net_connect.disconnect()

# 查看华为交换机端口带宽利用率
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display interface GigabitEthernet0/0/1 | include "Input rate|"Output rate"')
print(output)
net_connect.disconnect()

# 查看华为交换机 VLAN 信息
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display vlan')
print(output)
net_connect.disconnect()

# 查看华为交换机MAC表
from netmiko import ConnectHandler
huawei_switch = {
    'device_type': 'huawei',
    'ip': '192.168.1.1',
    'username': 'admin',
    'password': 'password',
}
net_connect = ConnectHandler(**huawei_switch)
output = net_connect.send_command('display mac-address')
print(output)
net_connect.disconnect()
