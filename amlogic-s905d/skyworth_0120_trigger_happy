# # playerctl --list-all ...... can replace remoter.sh
sed -i "s/^#HandlePowerKey=.*/HandlePowerKey=ignore/g" /etc/systemd/logind.conf
systemctl disable triggerhappy.socket
systemctl enable triggerhappy.service
sed -i "s|ExecStart=.*|ExecStart=/usr/sbin/thd --triggers /etc/triggerhappy/triggers.d/ --socket /run/thd.socket --user root|g" /lib/systemd/system/triggerhappy.service
cat > /lib/udev/rules.d/60-triggerhappy.rules << 'EOF'
ACTION=="add", SUBSYSTEM=="input", \
	ATTRS{name}=="SKYWORTH_0120 Keyboard", \
	RUN+="/usr/sbin/th-cmd --socket /var/run/thd.socket --passfd --udev --grab"
EOF
cat > /etc/X11/xorg.conf.d/20-sky.conf <<'EOF'
Section "InputClass"
    Identifier "SKYWORTH_0120 BLE REMOTE"
    MatchProduct "SKYWORTH_0120"
    Option "Ignore" "true"
EndSection
EOF
cat > /etc/triggerhappy/triggers.d/sky.conf <<'EOF'
# KEY_SELECT@       1   @media    # switch to media mode
# KEY_SELECT@media  1   @desk
# KEY_SELECT@desk   1   @         # switch back to nameless default mode
# KEY_COMPOSE@      1   echo "模式：None" | aosd_cat --font='DejaVu Serif:style=Book 32' --position=4 --fade-full=800 --fore-color=blue --shadow-opacity=0
# KEY_COMPOSE@media 1   echo "模式：MEDIA" | aosd_cat --font='DejaVu Serif:style=Book 32' --position=4 --fade-full=800 --fore-color=blue --shadow-opacity=0
# KEY_COMPOSE@desk  1   echo "模式：DESK" | aosd_cat --font='DejaVu Serif:style=Book 32' --position=4 --fade-full=800 --fore-color=blue --shadow-opacity=0
# KEY_UP@media      1   /usr/xxxxxxxx
# KEY_UP@desk       1   /usr/yyyyyyyy
KEY_POWER        1   /usr/bin/remoter.sh
KEY_UP           1   /usr/bin/remoter.sh
KEY_DOWN         1   /usr/bin/remoter.sh
KEY_LEFT         1   /usr/bin/remoter.sh
KEY_RIGHT        1   /usr/bin/remoter.sh
KEY_SELECT       1   /usr/bin/remoter.sh
KEY_COMPOSE      1   /usr/bin/remoter.sh
KEY_F5           1   /usr/bin/remoter.sh
KEY_ESC          1   /usr/bin/remoter.sh
KEY_VOLUMEUP     1   /usr/bin/remoter.sh
KEY_VOLUMEDOWN   1   /usr/bin/remoter.sh
KEY_POWER        2   /usr/bin/remoter.sh
KEY_UP           2   /usr/bin/remoter.sh
KEY_DOWN         2   /usr/bin/remoter.sh
KEY_LEFT         2   /usr/bin/remoter.sh
KEY_RIGHT        2   /usr/bin/remoter.sh
EOF
cat > /etc/skyworth_120.conf <<'EOF'
DEPTH=1
USER=johnyin
MEDIA_DIR=/media
LIST_FILE=/home/johnyin/Desktop/list.m3u
EOF
cat > /usr/bin/remoter.sh <<'EOF'
#!/usr/bin/env bash
# desktop: F5(run smplayer), POWER(poweroff)
# smplayer:F5(mute), POWER(close smplayer)
DEPTH=1
USER=johnyin
MEDIA_DIR=/media
LIST_FILE=/home/${USER}/Desktop/list.m3u
if [ -f /etc/skyworth_120.conf ]; then
  . /etc/skyworth_120.conf
fi
log() { logger -t triggerhappy $*; }
smplayer_start_stop() {
    local action=$1
    log "smplayer action ${action}"
    case "${action}" in
        start) [ -e "${LIST_FILE}" ] || {
                   systemd-run --scope --uid=${USER} /usr/bin/touch ${LIST_FILE}
                   # find ${MEDIA_DIR} -maxdepth ${DEPTH:-1} -type f -iname '*.mkv' \
                   #     -o -iname '*.avi' \
                   #     -o -iname '*.mp4' \
                   #     -o -iname '*.wmv' > ${LIST_FILE}
                   # # chown ${USER}: ${LIST_FILE}
               }
               # # start as systemd service, systemctl reset-failed smplayer-johnyin.service
               systemd-run --unit smplayer-johnyin --uid=${USER} -E DISPLAY=:0 smplayer -ontop ${LIST_FILE}
               ;;
        stop)  systemctl stop smplayer-johnyin.service
               pgrep -u ${USER} smplayer >/dev/null && pkill -u ${USER} smplayer
               # pgrep -u ${USER} smplayer >/dev/null && smplayer_action close
               ;;
        *)     log "smplayer action unknow [${action}]";;
    esac
}
smplayer_action() {
    log "send-action start($*)"
    systemd-run --scope --uid=${USER} -E DISPLAY=:0 smplayer -send-action $*
}
smplayer_addplaylist() {
    log "smplayer add playlist $*"
    systemd-run --scope --uid=${USER} -E DISPLAY=:0 smplayer -add-to-playlist $*
}
xsendkey() {
    # wmctrl -l
    local win_title=${1}
    local key=${2}
    log "xsendkey [$*]"
    systemd-run --scope --uid=${USER} -E DISPLAY=:0 xdotool search --desktop 0 "${LIST_FILE}" windowactivate key --clearmodifiers ${key}
}
get_context() {
    # 1: smplayer is not running
    # 2: smplayer is running, smplayer playlist dialog is not visable
    # 3: smplayer is running, smplayer playlist dialog is visable
    pgrep -u ${USER} smplayer >/dev/null || return 1
    systemd-run --scope --uid=${USER} -E DISPLAY=:0 wmctrl -l | grep -q "${LIST_FILE}" || return 2
    return 3
}
do_context_long_3() {
    # 3: smplayer is running, smplayer playlist dialog is visable
    local key=${1}
    case "${key}" in
        KEY_POWER)      smplayer_start_stop stop;;
        *)              log "unknow context_3 key ${key}";;
    esac
}
do_context_long_2() {
    # 2: smplayer is running, smplayer playlist dialog is not visable
    local key=${1}
    case "${key}" in
        KEY_POWER)      smplayer_start_stop stop;;
        KEY_UP)         smplayer_action increase_volume;;
        KEY_DOWN)       smplayer_action decrease_volume;;
        KEY_LEFT)       smplayer_action rewind2;;
        KEY_RIGHT)      smplayer_action forward2;;
        *)              log "unknow context_2 key ${key}";;
    esac
}
long_keypress() {
    local key=${1}
    get_context
    local ctx=$?
    case "${ctx}" in
        1) ;;
        2) do_context_long_2 ${key};;
        3) do_context_long_3 ${key};;
        *) log "unknow ctx ${ctx}";;
    esac
}
do_context_1() {
    # 1: smplayer is not running
    local key=${1}
    case "${key}" in
        KEY_POWER)      /usr/bin/systemctl poweroff;;
        KEY_COMPOSE)    ;;
        KEY_LEFT)       ;;
        KEY_RIGHT)      ;;
        KEY_UP)         ;;
        KEY_DOWN)       ;;
        KEY_SELECT)     /usr/bin/systemctl restart minidlna.service;;
        KEY_F5)         ;;
        KEY_ESC)        smplayer_start_stop start;;
        KEY_VOLUMEUP)   ;;
        KEY_VOLUMEDOWN) ;;
        *)              log "unknow context_1 key ${key}";;
    esac
}
do_context_2() {
    # 2: smplayer is running, smplayer playlist dialog is not visable
    local key=${1}
    case "${key}" in
        KEY_POWER)      smplayer_start_stop stop;;
        KEY_COMPOSE)    smplayer_action show_playlist;;
        KEY_LEFT)       smplayer_action rewind1;;
        KEY_RIGHT)      smplayer_action forward1;;
        KEY_UP)         smplayer_action increase_volume;;
        KEY_DOWN)       smplayer_action decrease_volume;;
        KEY_SELECT)     smplayer_action play_or_pause;;
        KEY_F5)         smplayer_action mute;;
        KEY_ESC)        smplayer_action fullscreen;;
        KEY_VOLUMEUP)   smplayer_action next_subtitle;;
        KEY_VOLUMEDOWN) smplayer_action next_audio;;
        *)              log "unknow context_2 key ${key}";;
    esac
}
do_context_3() {
    # 3: smplayer is running, smplayer playlist dialog is visable
    local key=${1}
    case "${key}" in
        KEY_POWER)      smplayer_start_stop stop;;
        KEY_COMPOSE)    smplayer_action show_playlist;;
        KEY_LEFT)       xsendkey "${LIST_FILE}" Left;;
        KEY_RIGHT)      xsendkey "${LIST_FILE}" Right;;
        KEY_UP)         xsendkey "${LIST_FILE}" Up;;
        KEY_DOWN)       xsendkey "${LIST_FILE}" Down;;
        KEY_SELECT)     xsendkey "${LIST_FILE}" Return;;
        KEY_F5)         smplayer_action show_playlist;;
        KEY_ESC)        xsendkey "${LIST_FILE}" Tab;;
        KEY_VOLUMEUP)   xsendkey "${LIST_FILE}" Page_Up;;
        KEY_VOLUMEDOWN) xsendkey "${LIST_FILE}" Page_Down;;
        *)              log "unknow context_3 key ${key}";;
    esac
}

keypress() {
    local key=${1}
    get_context
    local ctx=$?
    case "${ctx}" in
        1) do_context_1 ${key};;
        2) do_context_2 ${key};;
        3) do_context_3 ${key};;
        *) log "unknow ctx ${ctx}";;
    esac
}

# TH_VALUE=1
# TH_KEYSTATE=
# TH_EVENT=KEY_SELECT
# TH_DEVICE=/dev/input/event3
main() {
    case "${TH_VALUE}" in
        1)  keypress "${TH_EVENT}";;
        2)  long_keypress "${TH_EVENT}";;
        *)  log "unknow ${TH_VALUE}";;
    esac
}

LOCK_FILE=/tmp/skyremote.lock
LOCK_FD=
noflock () { log "lock ${LOCK_FILE} ${LOCK_FD} not acquired, giving up"; exit 1; }
( flock -n ${LOCK_FD} || noflock; main "$@"; ) {LOCK_FD}<>${LOCK_FILE}
EOF
chmod 755 /usr/bin/remoter.sh
