# # https://github.com/docker/buildx/releases/download/v0.11.2/buildx-v0.11.2.linux-amd64
# AMD64
docker build -t your-username/multiarch-example:manifest-amd64 --build-arg ARCH=amd64/ .
docker push your-username/multiarch-example:manifest-amd64
# ARM64
docker build -t your-username/multiarch-example:manifest-arm64 --build-arg ARCH=arm64/ .
docker push your-username/multiarch-example:manifest-arm64

docker pull 192.168.168.250/mirrorgooglecontainers/defaultbackend-amd64:1.4
docker pull 192.168.168.250/mirrorgooglecontainers/defaultbackend-arm64:1.4
docker manifest create --insecure 192.168.168.250/mirrorgooglecontainers/defaultbackend:1.4 --amend 192.168.168.250/mirrorgooglecontainers/defaultbackend-amd64:1.4 --amend 192.168.168.250/mirrorgooglecontainers/defaultbackend-arm64:1.4
docker manifest push --insecure 192.168.168.250/mirrorgooglecontainers/defaultbackend:1.4

cat <<EOF
# syntax=docker/dockerfile:1
FROM alpine:3.16
MAINTAINER  johnyin <yin.zh@neusoft.com>
RUN apk add curl
Build the Dockerfile with buildx, passing the list of architectures to build for:
EOF
docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 -t <username>/<image>:latest --push .
docker buildx imagetools inspect <username>/<image>:latest
docker run --rm docker.io/<username>/<image>:latest@sha256:xx1 uname -m
docker run --rm docker.io/<username>/<image>:latest@sha256:xx2 uname -m


ADD demo.jar app.jar
RUN bash -c 'touch /app.jar'
ENTRYPOINT [“java”,”-Djava.security.egd=file:/dev/./urandom”,”-jar”,”/app.jar”]

ADD app.zip
RUN unzip app.zip
ENTRYPOINT [“java”,”-Djava.security.egd=file:/dev/./urandom”,”-jar”,”app.jar”]
