cat config | grep certificate-authority-data | awk '{print $2}' | base64 -d > ca.crt
cat config | grep client-certificate-data | awk '{print $2}' | base64 -d > client.crt
cat config | grep client-key-data | awk '{print $2}' | base64 -d > client.key
APISERVER=$(cat config | grep server | awk '{print $2}')
# 查看API的url，使用curl命令调用API
curl --cert ./client.crt --cacert ./ca.crt --key ./client.key $APISERVER/api
curl --cert ./client.crt --cacert ./ca.crt --key ./client.key $APISERVER/api/v1/namespaces/default/pods/

quay.mirrors.ustc.edu.cn <=> quay.io
hub-mirror.c.163.com         docker.io

# 导出配置文件
kubeadm config print init-defaults --kubeconfig ClusterConfiguration > kubeadm.yml
# 替换 imageRepository: k8s.gcr.io 为下面的内容
imageRepository: registry.aliyuncs.com/google_containers
# 查看所需镜像列表
kubeadm config images list --config kubeadm.yml
# 拉取k8s集群所需要的镜像
kubeadm config images pull --config kubeadm.yml
# 拉取完成之后查看本地镜像列表
docker images | grep registry.aliyuncs.com

kubeadm init --kubernetes-version=1.18.2  \
--apiserver-advertise-address=192.168.x.130  \
--image-repository=registry.aliyuncs.com/google_containers  \
--pod-network-cidr=10.222.0.0/16
--ignore-preflight-errors=NumCPU


kubectl create namespace ingress
kubectl create -f nginx-ingress-controller-deployment.yaml -n=ingress

kubectl get svc -n kube-system

// 1、找到容器ID，并打印它的NS ID
docker inspect --format "{{.State.Pid}}"  16938de418ac
// 2、进入此容器的网络Namespace
nsenter -n -t  54438
// 3、抓DNS包
tcpdump -i eth0 udp dst port 53|grep youku.com
tcpdump -i eth1 tcp port 53
tcpdump -i enp1s9 dst 192.168.6.1 and src 192.168.6.2 and src port 80

test_ok() {
    # 首先验证kube-apiserver, kube-controller-manager, kube-scheduler, pod network 是否正常
    kubectl create deployment nginx --image=nginx:alpine
    kubectl scale deployment nginx --replicas=2
    # kubectl create deploy nginx --image=nginx --replicas=2
    # kubectl expose deploy nginx --port 80
    # 验证Nginx Pod是否正确运行，并且会分配192.168.开头的集群IP
    kubectl get pods -l app=nginx -o wide
    kubectl get ep nginx
    # kubectl exec nginx-565785f75c-nrghw -- printenv
    # 再验证一下kube-proxy是否正常：
    # 以 NodePort 方式对外提供服务 https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/
    kubectl expose deployment nginx --port=80 --type=NodePort
    # 查看集群外可访问的Port
    kubectl get services nginx
    # 可以通过任意 NodeIP:Port 在集群外部访问这个服务，本示例中部署的2台集群IP分别是172.17.20.210和172.17.20.211
    # curl http://172.17.20.210:31899
    # 最后验证一下dns, pod network是否正常：
    # 运行Busybox并进入交互模式
    kubectl run test --rm -it --image=radial/busyboxplus:curl /bin/sh
    # 输入`nslookup nginx`查看是否可以正确解析出集群内的IP，已验证DNS是否正常
    # nslookup nginx
    # # 输出
    # Server:    10.96.0.10
    # Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local
    # Name:      nginx
    # Address 1: 10.110.49.49 nginx.default.svc.cluster.local
    # 通过服务名进行访问，验证kube-proxy是否正常
    # curl http://nginx/
    # 分别访问一下2个Pod的内网IP，验证跨Node的网络通信是否正常
    # curl http://192.168.168.2/
    # curl http://192.168.168.3/
    # 验证通过，集群搭建成功
}

kubectl apply -f nginxDeployment.yml
kubectl cluster-info
kubectl create -f fileName.yml
kubectl create configmap example --from-file=configs/application.properties
kubectl create deployment firstpod --image=nginx
kubectl create secret generic mypassword --from-file=secrets/myverysecurepassword.txt
kubectl create secret generic mypassword2 --from-literal=password=123456
kubectl delete --all pods --namespace=monitoring
kubectl delete rc nginx
kubectl describe --namespace=kube-system pod kubernetes-dashboard-5bd6f767c7-mfxs
kubectl describe pods podName
kubectl edit configmap example
kubectl edit rc nginx
kubectl explain pods
kubectl expose deployment nginx --port=80 --target-port=80
kubectl get clusterroles
kubectl get deploy,rs,po,svc,ep
kubectl get deployment try1 -o yaml --export > simpleapp.yml
kubectl get endpoints
kubectl get events
kubectl get nodes
kubectl get pods --namespace=kube-system
kubectl get rc
kubectl get rolebindings
kubectl logs name -c containerName
kubectl logs podName
kubectl replace -f nginxDeployment.yml
kubectl rollout history deployment try1
kubectl rollout history deployment try1 --revision=1 > one.out
kubectl rollout undo --dry-run=true deployment/try1
kubectl rollout undo deployment try1 --to-revision=1
kubectl run nginx --image=nginx:1.12.0 --replicas=2 --port=80
kubectl set image deployment nginx nginx=nginx:1.13.1
kubectl top node
kubectl top pod besteffort
kubectl version
