# # NODE1
ip netns add netns1
ip link add veth1 type veth peer name veth2
ip link set veth2 netns netns1
ip netns exec netns1 ifconfig veth2 1.1.1.2/24 up
ifconfig veth1 up
ip netns exec netns1 route -n

ip netns exec netns1 ip route del 1.1.1.0/24
echo 1 > /proc/sys/net/ipv4/conf/veth1/proxy_arp
ip netns exec netns1 ip route add 169.254.1.1 dev veth2
ip netns exec netns1 ip route add default via 169.254.1.1 dev veth2
ip netns exec netns1 ip route

ip route add 1.1.1.2/32 dev veth1

# 无回指路由时候可用nat
# 一步SNAT没有做。 此时如果从host1/container0访问host2时，到达host2的源ip是11.12.11.121, 这样的话host2根本回复不了到host1上 去。 接下来就是iptable需要做的事情了。 在使用iptable表之前， 建议使用一个没有完全干净的iptable表， 并且设置默认链均是accept的状态。
# > iptables -F -t nat
# > iptables -F -t filter
# > iptables -P INPUT ACCEPT  -t filter
# > iptables -P OUTPUT ACCEPT -t filter
# > iptables -P FORWARD ACCEPT -t filter
# > iptables -P INPUT ACCEPT  -t nat
# > iptables -P OUTPUT ACCEPT -t nat
# > iptables -P FORWARD ACCEPT -t nat
# > iptables -P PREROUTING ACCEPT -t nat
# > iptables -P POSTROUTING ACCEPT -t nat
# ## 进行snat转换
# iptables -t nat -A POSTROUTING -s 11.12.11.121 -o eth0 -j MASQUERADE

# # NODE2
ip netns add netns2
ip link add veth3 type veth peer name veth4
ip link set veth4 netns netns2
ip netns exec netns2 ifconfig veth4 1.1.2.2/24 up
ifconfig veth3 up
ip netns exec netns2 route -n

ip netns exec netns2 ip route del 1.1.2.0/24
echo 1 > /proc/sys/net/ipv4/conf/veth3/proxy_arp
ip netns exec netns2 ip route add 169.254.1.1 dev veth4
ip netns exec netns2 ip route add default via 169.254.1.1 dev veth4
ip netns exec netns2 ip route

ip route add 1.1.2.2/32 dev veth3


数据包在node1上netns1网络协议栈组装好，通过匹配默认路由default via 169.254.1.1 dev veth2，数据包从veth2发出；
node1上从veth2出去的数据包到达veth pair的另一端veth1；
数据包匹配bird生成的1.1.2.0/24 via 10.0.12.7 dev eth0路由，把数据包从eth0发出，到达下一跳10.0.12.7，也就是node2；
node2上匹配路由1.1.2.2/32 dev veth3，数据包发往veth3；
node2上从veth3过来的数据包到达veth pair的另一端，netns2网络命名空间下的veth4；
node2上netns2网络命名空间下的veth4发现1.1.2.2是自己，构造回程报文，从veth4发出；
node2上veth4发出来的报文到达veth pair的另一端veth3；
node2上到达veth3的报文匹配路由1.1.1.0/24 via 10.0.12.11/32 dev eth0，从eth0发出到达node1；
node1上匹配1.1.1.2/32 dev veth1到达veth pair的一端veth1；
node1上从veth1过来的包到达veth pair的另一端，即netns1网络命名空间下的veth2；
node1上netns1网络命名空间下的veth2收到回程报文。

# # calico change pod cidr online
calicoctl get ipPool -o yaml > ip
# natOutgoing: true
# disabled: true
# change name to others!!
calicoctl apply -f ip
calicoctl get wep --all-namespaces
calicoctl delete pool default-ipv4-ippool
calicoctl get ippool -o wide
calicoctl get wep --all-namespaces
delete pods ...
